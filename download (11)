{
  "swagger": "2.0",
  "info": {
    "title": "ClustR",
    "description": "ClustR's internal API documentation",
    "termsOfService": "https://clustr-inc.com/terms-of-service/",
    "contact": {
      "email": "danielchibuezeolah@gmail.com"
    },
    "version": "v1"
  },
  "host": "127.0.0.1:8000",
  "schemes": [
    "http"
  ],
  "basePath": "/api/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "Basic": []
    }
  ],
  "paths": {
    "/accounts/": {
      "get": {
        "operationId": "accounts_list",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Account"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/add-staff/": {
      "post": {
        "operationId": "accounts_add_staff",
        "description": "If the admin edits the permissions for a pre-defined role, the permission for that role\ndefined in the context of that admin is updated on-click.\nThen the id is submitted with the new user information",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StaffAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/StaffAccount"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/add-user/": {
      "post": {
        "operationId": "accounts_add_user",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubuserAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubuserAccount"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/change-password/": {
      "post": {
        "operationId": "accounts_change_password",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{'detail': 'Password changed successfully'}"
          },
          "205": {
            "description": "{'detail': 'Password changed successfully'}"
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/email-verification/": {
      "post": {
        "operationId": "accounts_initialize_email_verification",
        "description": "Initialize email verification",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailVerification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{'detail': 'Verification email sent successfully'}"
          },
          "400": {
            "description": "{'detail': 'User with this email does not exist'}"
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/from-auth/": {
      "get": {
        "operationId": "accounts_get_account_information_from_auth",
        "description": "Endpoint to get the account information by using the data from the auth user instead\nof requiring an ID. This is required for frontend as at the time it requests to load\nthe account information, it doesn't yet know the account id.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Account"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/import-members/": {
      "post": {
        "operationId": "accounts_import_members",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResidentImportedData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ResidentImportedData"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/resident-import-template/": {
      "get": {
        "operationId": "accounts_get_import_template",
        "description": "Returns an Excel template file to serve as a starter/guide to users on the format for import",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Account"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/{id}/": {
      "get": {
        "operationId": "accounts_read",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "put": {
        "operationId": "accounts_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "patch": {
        "operationId": "accounts_partial_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/accounts/{id}/approve-account/": {
      "post": {
        "operationId": "accounts_approve_resident_account",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/accounts/{id}/change-permissions/": {
      "post": {
        "operationId": "accounts_change_permissions",
        "description": "This API accepts a list of strings defined as codenames for various permission classes\nhere in the backend. This endpoint changes the permissions completely",
        "parameters": [],
        "responses": {
          "200": {
            "description": "{'detail': 'Successfully changes user permissions'}"
          }
        },
        "tags": [
          "accounts"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/auth/cluster-signup/": {
      "post": {
        "operationId": "auth_cluster-signup_create",
        "description": "Register a new cluster with admin account",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterAdminAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/_AuthTokenPair"
            }
          },
          "400": {
            "description": "Duplicate entity error"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/auth/forgot-password/": {
      "post": {
        "operationId": "auth_forgot-password_create",
        "description": "Request a password reset email",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "400": {
            "description": "Invalid email address"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/auth/member-signup/": {
      "post": {
        "operationId": "auth_member-signup_create",
        "description": "Register a new cluster member account",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OwnerAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/_AuthTokenPair"
            }
          },
          "400": {
            "description": "Duplicate entity error"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/auth/reset-password/": {
      "post": {
        "operationId": "auth_reset-password_create",
        "description": "Reset password using a verification token",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Invalid token or password"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/auth/signin/": {
      "post": {
        "operationId": "auth_signin_create",
        "description": "Login endpoint to obtain JWT token pair",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthTokenPair"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/_AuthTokenPair"
            }
          },
          "400": {
            "description": "Duplicate entity error"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/auth/signin/refresh/": {
      "post": {
        "operationId": "auth_signin_refresh_create",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenRefresh"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TokenRefresh"
            }
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/auth/token-status/": {
      "post": {
        "operationId": "auth_token-status_create",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/core/files/delete/": {
      "post": {
        "operationId": "core_files_delete",
        "description": "Delete a file.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/files/delete_attachment/": {
      "delete": {
        "operationId": "core_files_delete_attachment",
        "description": "Delete an announcement attachment.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/files/preview_attachment/": {
      "get": {
        "operationId": "core_files_preview_attachment",
        "description": "Get preview information for an attachment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/files/upload/": {
      "post": {
        "operationId": "core_files_upload",
        "description": "Upload a file.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/files/upload_announcement_attachment/": {
      "post": {
        "operationId": "core_files_upload_announcement_attachment",
        "description": "Upload an attachment for announcements.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/bills/": {
      "get": {
        "operationId": "core_utility_bills_list",
        "description": "ViewSet for utility bills.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UtilityBill"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "post": {
        "operationId": "core_utility_bills_create",
        "description": "ViewSet for utility bills.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/bills/summary/": {
      "get": {
        "operationId": "core_utility_bills_summary",
        "description": "Get utility bills summary.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UtilityBill"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/bills/{id}/": {
      "get": {
        "operationId": "core_utility_bills_read",
        "description": "ViewSet for utility bills.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "put": {
        "operationId": "core_utility_bills_update",
        "description": "ViewSet for utility bills.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "patch": {
        "operationId": "core_utility_bills_partial_update",
        "description": "ViewSet for utility bills.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UtilityBill"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "delete": {
        "operationId": "core_utility_bills_delete",
        "description": "ViewSet for utility bills.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/core/utility/payments/pay_utility/": {
      "post": {
        "operationId": "core_utility_payments_pay_utility",
        "description": "Process one-time utility payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/payments/payment_history/": {
      "get": {
        "operationId": "core_utility_payments_payment_history",
        "description": "Get user's utility payment history.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/payments/setup_recurring/": {
      "post": {
        "operationId": "core_utility_payments_setup_recurring",
        "description": "Set up recurring utility payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/payments/validate_customer/": {
      "post": {
        "operationId": "core_utility_payments_validate_customer",
        "description": "Validate utility customer.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/providers/": {
      "get": {
        "operationId": "core_utility_providers_list",
        "description": "ViewSet for utility providers.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UtilityProvider"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/providers/by_type/": {
      "get": {
        "operationId": "core_utility_providers_by_type",
        "description": "Get utility providers grouped by type.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UtilityProvider"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/providers/{id}/": {
      "get": {
        "operationId": "core_utility_providers_read",
        "description": "ViewSet for utility providers.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UtilityProvider"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/core/utility/recurring-payments/": {
      "get": {
        "operationId": "core_utility_recurring-payments_list",
        "description": "ViewSet for recurring utility payments.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RecurringUtilityPayment"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "post": {
        "operationId": "core_utility_recurring-payments_create",
        "description": "ViewSet for recurring utility payments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/recurring-payments/summary/": {
      "get": {
        "operationId": "core_utility_recurring-payments_summary",
        "description": "Get recurring payments summary.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RecurringUtilityPayment"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": []
    },
    "/core/utility/recurring-payments/{id}/": {
      "get": {
        "operationId": "core_utility_recurring-payments_read",
        "description": "ViewSet for recurring utility payments.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "put": {
        "operationId": "core_utility_recurring-payments_update",
        "description": "ViewSet for recurring utility payments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "patch": {
        "operationId": "core_utility_recurring-payments_partial_update",
        "description": "ViewSet for recurring utility payments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "delete": {
        "operationId": "core_utility_recurring-payments_delete",
        "description": "ViewSet for recurring utility payments.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/core/utility/recurring-payments/{id}/cancel/": {
      "post": {
        "operationId": "core_utility_recurring-payments_cancel",
        "description": "Cancel recurring payment.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/core/utility/recurring-payments/{id}/pause/": {
      "post": {
        "operationId": "core_utility_recurring-payments_pause",
        "description": "Pause recurring payment.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/core/utility/recurring-payments/{id}/resume/": {
      "post": {
        "operationId": "core_utility_recurring-payments_resume",
        "description": "Resume recurring payment.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecurringUtilityPayment"
            }
          }
        },
        "tags": [
          "core"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/": {
      "get": {
        "operationId": "management_announcements_list",
        "description": "ViewSet for managing announcements in the management app.\nAllows administrators to create, view, update, and delete announcements.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A search term.",
            "required": false,
            "type": "string"
          },
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Announcement"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_announcements_create",
        "description": "ViewSet for managing announcements in the management app.\nAllows administrators to create, view, update, and delete announcements.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnouncementCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnnouncementCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/announcements/categories/": {
      "get": {
        "operationId": "management_announcements_categories",
        "description": "Get available announcement categories.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A search term.",
            "required": false,
            "type": "string"
          },
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Announcement"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/announcements/{id}/": {
      "get": {
        "operationId": "management_announcements_read",
        "description": "ViewSet for managing announcements in the management app.\nAllows administrators to create, view, update, and delete announcements.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_announcements_update",
        "description": "ViewSet for managing announcements in the management app.\nAllows administrators to create, view, update, and delete announcements.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnouncementUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnnouncementUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_announcements_partial_update",
        "description": "ViewSet for managing announcements in the management app.\nAllows administrators to create, view, update, and delete announcements.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnouncementUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnnouncementUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_announcements_delete",
        "description": "ViewSet for managing announcements in the management app.\nAllows administrators to create, view, update, and delete announcements.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/add_attachment/": {
      "post": {
        "operationId": "management_announcements_add_attachment",
        "description": "Add an attachment to an announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/add_comment/": {
      "post": {
        "operationId": "management_announcements_add_comment",
        "description": "Add a comment to an announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/attachments/": {
      "get": {
        "operationId": "management_announcements_attachments",
        "description": "Get attachments for a specific announcement.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/comments/": {
      "get": {
        "operationId": "management_announcements_comments",
        "description": "Get comments for a specific announcement.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/engagement_metrics/": {
      "get": {
        "operationId": "management_announcements_engagement_metrics",
        "description": "Get engagement metrics for an announcement.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/publish/": {
      "post": {
        "operationId": "management_announcements_publish",
        "description": "Publish an announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/remove_attachment/": {
      "delete": {
        "operationId": "management_announcements_remove_attachment",
        "description": "Remove an attachment from an announcement.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/announcements/{id}/unpublish/": {
      "post": {
        "operationId": "management_announcements_unpublish",
        "description": "Unpublish an announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/children/": {
      "get": {
        "operationId": "management_children_list",
        "description": "ViewSet for managing children in the management app.\nAllows administrators to view and manage all children in the estate.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Child"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_children_create",
        "description": "ViewSet for managing children in the management app.\nAllows administrators to view and manage all children in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChildCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/children/by_parent/": {
      "get": {
        "operationId": "management_children_by_parent",
        "description": "Get children filtered by parent ID.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Child"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/children/{id}/": {
      "get": {
        "operationId": "management_children_read",
        "description": "ViewSet for managing children in the management app.\nAllows administrators to view and manage all children in the estate.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Child"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_children_update",
        "description": "ViewSet for managing children in the management app.\nAllows administrators to view and manage all children in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_children_partial_update",
        "description": "ViewSet for managing children in the management app.\nAllows administrators to view and manage all children in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_children_delete",
        "description": "ViewSet for managing children in the management app.\nAllows administrators to view and manage all children in the estate.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/children/{id}/upload_photo/": {
      "post": {
        "operationId": "management_children_upload_photo",
        "description": "Upload a profile photo for the child.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Child"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Child"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/emergency-contacts/": {
      "get": {
        "operationId": "management_emergency-contacts_list",
        "description": "ViewSet for managing all emergency contacts (personal and estate-wide).\nManagement can view and manage all emergency contacts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_emergency-contacts_create",
        "description": "ViewSet for managing all emergency contacts (personal and estate-wide).\nManagement can view and manage all emergency contacts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyContactCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyContactCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/emergency-contacts/by_type/": {
      "get": {
        "operationId": "management_emergency-contacts_by_type",
        "description": "Get emergency contacts by emergency type",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/emergency-contacts/contact_types/": {
      "get": {
        "operationId": "management_emergency-contacts_contact_types",
        "description": "Get available contact types",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/emergency-contacts/emergency_types/": {
      "get": {
        "operationId": "management_emergency-contacts_emergency_types",
        "description": "Get available emergency types",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/emergency-contacts/estate_wide/": {
      "get": {
        "operationId": "management_emergency-contacts_estate_wide",
        "description": "Get estate-wide emergency contacts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/emergency-contacts/{id}/": {
      "get": {
        "operationId": "management_emergency-contacts_read",
        "description": "ViewSet for managing all emergency contacts (personal and estate-wide).\nManagement can view and manage all emergency contacts.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyContact"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_emergency-contacts_update",
        "description": "ViewSet for managing all emergency contacts (personal and estate-wide).\nManagement can view and manage all emergency contacts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyContactUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyContactUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_emergency-contacts_partial_update",
        "description": "ViewSet for managing all emergency contacts (personal and estate-wide).\nManagement can view and manage all emergency contacts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyContactUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyContactUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_emergency-contacts_delete",
        "description": "ViewSet for managing all emergency contacts (personal and estate-wide).\nManagement can view and manage all emergency contacts.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/emergency-responses/": {
      "get": {
        "operationId": "management_emergency-responses_list",
        "description": "ViewSet for managing emergency responses.\nManagement can create and view all emergency responses.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_emergency-responses_create",
        "description": "ViewSet for managing emergency responses.\nManagement can create and view all emergency responses.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyResponseCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyResponseCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/emergency-responses/{id}/": {
      "get": {
        "operationId": "management_emergency-responses_read",
        "description": "ViewSet for managing emergency responses.\nManagement can create and view all emergency responses.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyResponse"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_emergency-responses_update",
        "description": "ViewSet for managing emergency responses.\nManagement can create and view all emergency responses.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyResponse"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_emergency-responses_partial_update",
        "description": "ViewSet for managing emergency responses.\nManagement can create and view all emergency responses.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyResponse"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_emergency-responses_delete",
        "description": "ViewSet for managing emergency responses.\nManagement can create and view all emergency responses.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/": {
      "get": {
        "operationId": "management_events_list",
        "description": "ViewSet for managing events in the management app.\nAllows administrators to view and manage all events in the estate.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_events_create",
        "description": "ViewSet for managing events in the management app.\nAllows administrators to view and manage all events in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/events/{event_pk}/guests/": {
      "get": {
        "operationId": "management_events_guests_list",
        "description": "ViewSet for managing event guests in the management app.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EventGuest"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_events_guests_create",
        "description": "ViewSet for managing event guests in the management app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventGuestCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventGuestCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "event_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{event_pk}/guests/{id}/": {
      "get": {
        "operationId": "management_events_guests_read",
        "description": "ViewSet for managing event guests in the management app.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventGuest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_events_guests_update",
        "description": "ViewSet for managing event guests in the management app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventGuest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventGuest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_events_guests_partial_update",
        "description": "ViewSet for managing event guests in the management app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventGuest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventGuest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_events_guests_delete",
        "description": "ViewSet for managing event guests in the management app.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "event_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{event_pk}/guests/{id}/check_in/": {
      "post": {
        "operationId": "management_events_guests_check_in",
        "description": "Check in an event guest.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventGuestCheckIn"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventGuestCheckIn"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "event_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{event_pk}/guests/{id}/check_out/": {
      "post": {
        "operationId": "management_events_guests_check_out",
        "description": "Check out an event guest.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventGuestCheckOut"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventGuestCheckOut"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "event_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{id}/": {
      "get": {
        "operationId": "management_events_read",
        "description": "ViewSet for managing events in the management app.\nAllows administrators to view and manage all events in the estate.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_events_update",
        "description": "ViewSet for managing events in the management app.\nAllows administrators to view and manage all events in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_events_partial_update",
        "description": "ViewSet for managing events in the management app.\nAllows administrators to view and manage all events in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_events_delete",
        "description": "ViewSet for managing events in the management app.\nAllows administrators to view and manage all events in the estate.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{id}/add_guests/": {
      "post": {
        "operationId": "management_events_add_guests",
        "description": "Add multiple guests to an event at once.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkGuestCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkGuestCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{id}/cancel/": {
      "post": {
        "operationId": "management_events_cancel",
        "description": "Cancel an event.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/events/{id}/publish/": {
      "post": {
        "operationId": "management_events_publish",
        "description": "Publish an event.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/": {
      "get": {
        "operationId": "management_helpdesk_issues_list",
        "description": "List all issues with filtering and search",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueTicketList"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_helpdesk_issues_create",
        "description": "Management viewset for issue tickets.\nAllows administrators to view and manage all issues in their cluster.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/helpdesk/issues/statistics/": {
      "get": {
        "operationId": "management_helpdesk_issues_statistics",
        "description": "Get issue statistics for dashboard",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueTicketDetail"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/helpdesk/issues/{id}/": {
      "get": {
        "operationId": "management_helpdesk_issues_read",
        "description": "Management viewset for issue tickets.\nAllows administrators to view and manage all issues in their cluster.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_helpdesk_issues_update",
        "description": "Update issue ticket",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_helpdesk_issues_partial_update",
        "description": "Management viewset for issue tickets.\nAllows administrators to view and manage all issues in their cluster.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_helpdesk_issues_delete",
        "description": "Management viewset for issue tickets.\nAllows administrators to view and manage all issues in their cluster.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{id}/assign/": {
      "post": {
        "operationId": "management_helpdesk_issues_assign",
        "description": "Assign issue to a staff member",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{id}/escalate/": {
      "post": {
        "operationId": "management_helpdesk_issues_escalate",
        "description": "Escalate an issue",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{issue_pk}/attachments/": {
      "get": {
        "operationId": "management_helpdesk_issues_attachments_list",
        "description": "Management viewset for issue attachments.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueAttachment"
                  }
                }
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_helpdesk_issues_attachments_create",
        "description": "Upload and create attachment",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentCreate"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{issue_pk}/attachments/{id}/": {
      "get": {
        "operationId": "management_helpdesk_issues_attachments_read",
        "description": "Management viewset for issue attachments.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_helpdesk_issues_attachments_update",
        "description": "Management viewset for issue attachments.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_helpdesk_issues_attachments_partial_update",
        "description": "Management viewset for issue attachments.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_helpdesk_issues_attachments_delete",
        "description": "Management viewset for issue attachments.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{issue_pk}/comments/": {
      "get": {
        "operationId": "management_helpdesk_issues_comments_list",
        "description": "List comments for an issue",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueComment"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_helpdesk_issues_comments_create",
        "description": "Management viewset for issue comments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueCommentCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueCommentCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{issue_pk}/comments/{comment_pk}/attachments/": {
      "get": {
        "operationId": "management_helpdesk_issues_comments_attachments_list",
        "description": "Management viewset for issue attachments.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueAttachment"
                  }
                }
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_helpdesk_issues_comments_attachments_create",
        "description": "Upload and create attachment",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentCreate"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{issue_pk}/comments/{comment_pk}/attachments/{id}/": {
      "get": {
        "operationId": "management_helpdesk_issues_comments_attachments_read",
        "description": "Management viewset for issue attachments.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_helpdesk_issues_comments_attachments_update",
        "description": "Management viewset for issue attachments.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_helpdesk_issues_comments_attachments_partial_update",
        "description": "Management viewset for issue attachments.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_helpdesk_issues_comments_attachments_delete",
        "description": "Management viewset for issue attachments.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/helpdesk/issues/{issue_pk}/comments/{id}/": {
      "get": {
        "operationId": "management_helpdesk_issues_comments_read",
        "description": "Management viewset for issue comments.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_helpdesk_issues_comments_update",
        "description": "Management viewset for issue comments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_helpdesk_issues_comments_partial_update",
        "description": "Management viewset for issue comments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_helpdesk_issues_comments_delete",
        "description": "Management viewset for issue comments.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/invitations/": {
      "get": {
        "operationId": "management_invitations_list",
        "description": "ViewSet for managing invitations in the management app.\nAllows administrators to view and manage all invitations in the estate.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Invitation"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_invitations_create",
        "description": "ViewSet for managing invitations in the management app.\nAllows administrators to view and manage all invitations in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/invitations/{id}/": {
      "get": {
        "operationId": "management_invitations_read",
        "description": "ViewSet for managing invitations in the management app.\nAllows administrators to view and manage all invitations in the estate.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_invitations_update",
        "description": "ViewSet for managing invitations in the management app.\nAllows administrators to view and manage all invitations in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_invitations_partial_update",
        "description": "ViewSet for managing invitations in the management app.\nAllows administrators to view and manage all invitations in the estate.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_invitations_delete",
        "description": "ViewSet for managing invitations in the management app.\nAllows administrators to view and manage all invitations in the estate.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/invitations/{id}/revoke/": {
      "post": {
        "operationId": "management_invitations_revoke",
        "description": "Revoke an invitation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationRevoke"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationRevoke"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/maintenance-logs/": {
      "get": {
        "operationId": "management_maintenance-logs_list",
        "description": "ViewSet for managing maintenance logs.\nProvides CRUD operations and custom actions for assignment, attachment, history, analytics, and optimizations.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_maintenance-logs_create",
        "description": "ViewSet for managing maintenance logs.\nProvides CRUD operations and custom actions for assignment, attachment, history, analytics, and optimizations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLogCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLogCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/maintenance-logs/analytics/": {
      "get": {
        "operationId": "management_maintenance-logs_analytics",
        "description": "Get maintenance analytics and statistics.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/maintenance-logs/history/": {
      "get": {
        "operationId": "management_maintenance-logs_history",
        "description": "Get maintenance history with optional filtering.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/maintenance-logs/optimizations/": {
      "get": {
        "operationId": "management_maintenance-logs_optimizations",
        "description": "Get maintenance optimization suggestions.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/maintenance-logs/{id}/": {
      "get": {
        "operationId": "management_maintenance-logs_read",
        "description": "ViewSet for managing maintenance logs.\nProvides CRUD operations and custom actions for assignment, attachment, history, analytics, and optimizations.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_maintenance-logs_update",
        "description": "ViewSet for managing maintenance logs.\nProvides CRUD operations and custom actions for assignment, attachment, history, analytics, and optimizations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_maintenance-logs_partial_update",
        "description": "ViewSet for managing maintenance logs.\nProvides CRUD operations and custom actions for assignment, attachment, history, analytics, and optimizations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_maintenance-logs_delete",
        "description": "ViewSet for managing maintenance logs.\nProvides CRUD operations and custom actions for assignment, attachment, history, analytics, and optimizations.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/management/maintenance-logs/{id}/assign_maintenance/": {
      "post": {
        "operationId": "management_maintenance-logs_assign_maintenance",
        "description": "Assign maintenance to a staff member.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/management/maintenance-logs/{id}/upload_attachment/": {
      "post": {
        "operationId": "management_maintenance-logs_upload_attachment",
        "description": "Upload an attachment for a maintenance log.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "Brief title describing the maintenance activity",
            "required": true,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Detailed description of the maintenance work performed",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "maintenance_type",
            "in": "formData",
            "description": "Type of maintenance activity",
            "required": false,
            "type": "string",
            "enum": [
              "PREVENTIVE",
              "CORRECTIVE",
              "EMERGENCY",
              "ROUTINE",
              "INSPECTION",
              "UPGRADE",
              "OTHER"
            ]
          },
          {
            "name": "property_type",
            "in": "formData",
            "description": "Type of property or equipment maintained",
            "required": false,
            "type": "string",
            "enum": [
              "BUILDING",
              "ELECTRICAL",
              "PLUMBING",
              "HVAC",
              "SECURITY",
              "LANDSCAPING",
              "EQUIPMENT",
              "INFRASTRUCTURE",
              "OTHER"
            ]
          },
          {
            "name": "property_location",
            "in": "formData",
            "description": "Specific location of the property or equipment",
            "required": true,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "equipment_name",
            "in": "formData",
            "description": "Name or model of the equipment (if applicable)",
            "required": false,
            "type": "string",
            "maxLength": 200
          },
          {
            "name": "priority",
            "in": "formData",
            "description": "Priority level of the maintenance",
            "required": false,
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "URGENT"
            ]
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Current status of the maintenance",
            "required": false,
            "type": "string",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "POSTPONED"
            ]
          },
          {
            "name": "scheduled_date",
            "in": "formData",
            "description": "Scheduled date and time for the maintenance",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "started_at",
            "in": "formData",
            "description": "Timestamp when maintenance was started",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "completed_at",
            "in": "formData",
            "description": "Timestamp when maintenance was completed",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "estimated_duration",
            "in": "formData",
            "description": "Estimated time to complete the maintenance",
            "required": false,
            "type": "string",
            "x-nullable": true
          },
          {
            "name": "actual_duration",
            "in": "formData",
            "description": "Actual time spent on the maintenance",
            "required": false,
            "type": "string",
            "x-nullable": true
          },
          {
            "name": "cost",
            "in": "formData",
            "description": "Total cost of the maintenance",
            "required": false,
            "type": "string",
            "format": "decimal",
            "x-nullable": true
          },
          {
            "name": "materials_used",
            "in": "formData",
            "description": "List of materials and parts used",
            "required": false,
            "type": "string"
          },
          {
            "name": "tools_used",
            "in": "formData",
            "description": "List of tools and equipment used",
            "required": false,
            "type": "string"
          },
          {
            "name": "notes",
            "in": "formData",
            "description": "Additional notes about the maintenance",
            "required": false,
            "type": "string"
          },
          {
            "name": "completion_notes",
            "in": "formData",
            "description": "Notes about maintenance completion and results",
            "required": false,
            "type": "string"
          },
          {
            "name": "next_maintenance_due",
            "in": "formData",
            "description": "When the next maintenance is due for this item",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "warranty_expiry",
            "in": "formData",
            "description": "Warranty expiry date for the equipment",
            "required": false,
            "type": "string",
            "format": "date",
            "x-nullable": true
          },
          {
            "name": "is_under_warranty",
            "in": "formData",
            "description": "Whether the equipment is still under warranty",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/management/maintenance-schedules/": {
      "get": {
        "operationId": "management_maintenance-schedules_list",
        "description": "ViewSet for managing maintenance schedules.\nProvides CRUD operations.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceSchedule"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_maintenance-schedules_create",
        "description": "ViewSet for managing maintenance schedules.\nProvides CRUD operations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceScheduleCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceScheduleCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/maintenance-schedules/{id}/": {
      "get": {
        "operationId": "management_maintenance-schedules_read",
        "description": "ViewSet for managing maintenance schedules.\nProvides CRUD operations.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceSchedule"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_maintenance-schedules_update",
        "description": "ViewSet for managing maintenance schedules.\nProvides CRUD operations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceSchedule"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_maintenance-schedules_partial_update",
        "description": "ViewSet for managing maintenance schedules.\nProvides CRUD operations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceSchedule"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_maintenance-schedules_delete",
        "description": "ViewSet for managing maintenance schedules.\nProvides CRUD operations.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/management/payments/available_payment_providers/": {
      "get": {
        "operationId": "management_payments_available_payment_providers",
        "description": "Get list of available payment providers.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/bills/": {
      "get": {
        "operationId": "management_payments_bills",
        "description": "Get bills with filtering and pagination.\nSupports filtering by user_id, bill_type, and cluster_wide status.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/cancel_recurring_payment/": {
      "post": {
        "operationId": "management_payments_cancel_recurring_payment",
        "description": "Cancel a recurring payment (admin).",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/cluster_wallet/": {
      "get": {
        "operationId": "management_payments_cluster_wallet",
        "description": "Get cluster wallet information and analytics.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/cluster_wallet_credit/": {
      "post": {
        "operationId": "management_payments_cluster_wallet_credit",
        "description": "Manually add credit to cluster wallet with payment provider integration.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/cluster_wallet_transfer/": {
      "post": {
        "operationId": "management_payments_cluster_wallet_transfer",
        "description": "Transfer funds from cluster wallet with payment provider integration.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/create_bill/": {
      "post": {
        "operationId": "management_payments_create_bill",
        "description": "Create a new bill - supports both cluster-wide and user-specific bills.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/create_bulk_bills/": {
      "post": {
        "operationId": "management_payments_create_bulk_bills",
        "description": "Create multiple bills at once - supports both cluster-wide and user-specific bills.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/create_recurring_payment/": {
      "post": {
        "operationId": "management_payments_create_recurring_payment",
        "description": "Create a new recurring payment (admin).",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/dashboard/": {
      "get": {
        "operationId": "management_payments_dashboard",
        "description": "Get payment dashboard data for administrators.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/pause_recurring_payment/": {
      "post": {
        "operationId": "management_payments_pause_recurring_payment",
        "description": "Pause a recurring payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/recurring_payments/": {
      "get": {
        "operationId": "management_payments_recurring_payments",
        "description": "Get recurring payments with filtering and pagination.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/resume_recurring_payment/": {
      "post": {
        "operationId": "management_payments_resume_recurring_payment",
        "description": "Resume a paused recurring payment (admin).",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/retry_failed_payment/": {
      "post": {
        "operationId": "management_payments_retry_failed_payment",
        "description": "Retry a failed payment transaction.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/transactions/": {
      "get": {
        "operationId": "management_payments_transactions",
        "description": "Get transactions with filtering and pagination.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/update_bill_status/": {
      "post": {
        "operationId": "management_payments_update_bill_status",
        "description": "Update bill status.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/update_recurring_payment/": {
      "put": {
        "operationId": "management_payments_update_recurring_payment",
        "description": "Update a recurring payment (admin).",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/payments/verify_manual_credit/": {
      "post": {
        "operationId": "management_payments_verify_manual_credit",
        "description": "Verify a manual credit payment through payment provider.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/roles/": {
      "get": {
        "operationId": "management_roles_list",
        "description": "API endpoint for listing and creating roles.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_roles_create",
        "description": "API endpoint for listing and creating roles.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/roles/assign/": {
      "post": {
        "operationId": "management_roles_assign_create",
        "description": "API endpoint for assigning roles to users.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/roles/{id}/": {
      "get": {
        "operationId": "management_roles_read",
        "description": "API endpoint for retrieving, updating and deleting roles.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_roles_update",
        "description": "API endpoint for retrieving, updating and deleting roles.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_roles_partial_update",
        "description": "API endpoint for retrieving, updating and deleting roles.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_roles_delete",
        "description": "API endpoint for retrieving, updating and deleting roles.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shift-reports/": {
      "get": {
        "operationId": "management_shift-reports_list",
        "description": "Generate shift report.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/shift-swap-requests/": {
      "get": {
        "operationId": "management_shift-swap-requests_list",
        "description": "ViewSet for managing shift swap requests.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ShiftSwapRequest"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_shift-swap-requests_create",
        "description": "ViewSet for managing shift swap requests.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequestCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequestCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/shift-swap-requests/{id}/": {
      "get": {
        "operationId": "management_shift-swap-requests_read",
        "description": "ViewSet for managing shift swap requests.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_shift-swap-requests_update",
        "description": "ViewSet for managing shift swap requests.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_shift-swap-requests_partial_update",
        "description": "ViewSet for managing shift swap requests.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_shift-swap-requests_delete",
        "description": "ViewSet for managing shift swap requests.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shift-swap-requests/{id}/respond/": {
      "post": {
        "operationId": "management_shift-swap-requests_respond",
        "description": "Respond to a swap request (approve/reject).",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftSwapRequest"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shifts/": {
      "get": {
        "operationId": "management_shifts_list",
        "description": "ViewSet for managing shifts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ShiftList"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_shifts_create",
        "description": "ViewSet for managing shifts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/shifts/overdue/": {
      "get": {
        "operationId": "management_shifts_overdue",
        "description": "Get overdue shifts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Shift"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/shifts/statistics/": {
      "get": {
        "operationId": "management_shifts_statistics",
        "description": "Get shift statistics.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Shift"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/shifts/upcoming/": {
      "get": {
        "operationId": "management_shifts_upcoming",
        "description": "Get upcoming shifts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Shift"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/shifts/{id}/": {
      "get": {
        "operationId": "management_shifts_read",
        "description": "ViewSet for managing shifts.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_shifts_update",
        "description": "ViewSet for managing shifts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_shifts_partial_update",
        "description": "ViewSet for managing shifts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShiftUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_shifts_delete",
        "description": "ViewSet for managing shifts.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shifts/{id}/cancel/": {
      "post": {
        "operationId": "management_shifts_cancel",
        "description": "Cancel a shift.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shifts/{id}/clock_in/": {
      "post": {
        "operationId": "management_shifts_clock_in",
        "description": "Clock in a staff member for their shift.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shifts/{id}/clock_out/": {
      "post": {
        "operationId": "management_shifts_clock_out",
        "description": "Clock out a staff member from their shift.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/shifts/{id}/mark_no_show/": {
      "post": {
        "operationId": "management_shifts_mark_no_show",
        "description": "Mark a shift as no show.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Shift"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/": {
      "get": {
        "operationId": "management_sos-alerts_list",
        "description": "ViewSet for managing all SOS alerts.\nManagement can view, acknowledge, respond to, and resolve all alerts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_sos-alerts_create",
        "description": "ViewSet for managing all SOS alerts.\nManagement can view, acknowledge, respond to, and resolve all alerts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlertCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlertCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/active/": {
      "get": {
        "operationId": "management_sos-alerts_active",
        "description": "Get all active alerts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/emergency_types/": {
      "get": {
        "operationId": "management_sos-alerts_emergency_types",
        "description": "Get available emergency types",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/export_report/": {
      "get": {
        "operationId": "management_sos-alerts_export_report",
        "description": "Export emergency report in various formats",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/generate_report/": {
      "post": {
        "operationId": "management_sos-alerts_generate_report",
        "description": "Generate comprehensive emergency report",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/statistics/": {
      "get": {
        "operationId": "management_sos-alerts_statistics",
        "description": "Get emergency statistics",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/status_choices/": {
      "get": {
        "operationId": "management_sos-alerts_status_choices",
        "description": "Get available status choices",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/sos-alerts/{id}/": {
      "get": {
        "operationId": "management_sos-alerts_read",
        "description": "ViewSet for managing all SOS alerts.\nManagement can view, acknowledge, respond to, and resolve all alerts.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_sos-alerts_update",
        "description": "ViewSet for managing all SOS alerts.\nManagement can view, acknowledge, respond to, and resolve all alerts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_sos-alerts_partial_update",
        "description": "ViewSet for managing all SOS alerts.\nManagement can view, acknowledge, respond to, and resolve all alerts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_sos-alerts_delete",
        "description": "ViewSet for managing all SOS alerts.\nManagement can view, acknowledge, respond to, and resolve all alerts.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/{id}/acknowledge/": {
      "post": {
        "operationId": "management_sos-alerts_acknowledge",
        "description": "Acknowledge an SOS alert",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/{id}/cancel/": {
      "post": {
        "operationId": "management_sos-alerts_cancel",
        "description": "Cancel an SOS alert",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/{id}/incident_report/": {
      "get": {
        "operationId": "management_sos-alerts_incident_report",
        "description": "Generate detailed incident report for a specific alert",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/{id}/resolve/": {
      "post": {
        "operationId": "management_sos-alerts_resolve",
        "description": "Resolve an SOS alert",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/{id}/responses/": {
      "get": {
        "operationId": "management_sos-alerts_responses",
        "description": "Get responses for a specific alert",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/sos-alerts/{id}/start_response/": {
      "post": {
        "operationId": "management_sos-alerts_start_response",
        "description": "Start response to an SOS alert",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/staff-schedule/": {
      "get": {
        "operationId": "management_staff-schedule_list",
        "description": "Get schedule for a specific staff member or all staff.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/staff-schedule/{staff_id}/": {
      "get": {
        "operationId": "management_staff-schedule_read",
        "description": "Get schedule for a specific staff member or all staff.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "staff_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/task-comments/": {
      "get": {
        "operationId": "management_task-comments_list",
        "description": "ViewSet for managing task comments in the management app.",
        "parameters": [
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskComment"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_task-comments_create",
        "description": "ViewSet for managing task comments in the management app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCommentCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskCommentCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/task-comments/{id}/": {
      "get": {
        "operationId": "management_task-comments_read",
        "description": "ViewSet for managing task comments in the management app.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskComment"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_task-comments_update",
        "description": "ViewSet for managing task comments in the management app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCommentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskCommentCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_task-comments_partial_update",
        "description": "ViewSet for managing task comments in the management app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCommentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskCommentCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_task-comments_delete",
        "description": "ViewSet for managing task comments in the management app.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/tasks/": {
      "get": {
        "operationId": "management_tasks_list",
        "description": "ViewSet for managing tasks in the management app.\nProvides full CRUD operations and task management functionality.",
        "parameters": [
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskList"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_tasks_create",
        "description": "ViewSet for managing tasks in the management app.\nProvides full CRUD operations and task management functionality.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskCreate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/tasks/due_soon/": {
      "get": {
        "operationId": "management_tasks_due_soon",
        "description": "Get tasks due soon.",
        "parameters": [
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskDetail"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/tasks/overdue/": {
      "get": {
        "operationId": "management_tasks_overdue",
        "description": "Get overdue tasks.",
        "parameters": [
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskDetail"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/tasks/performance_analytics/": {
      "get": {
        "operationId": "management_tasks_performance_analytics",
        "description": "Get task performance analytics.",
        "parameters": [
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskDetail"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/tasks/statistics/": {
      "get": {
        "operationId": "management_tasks_statistics",
        "description": "Get task statistics.",
        "parameters": [
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskDetail"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/tasks/{id}/": {
      "get": {
        "operationId": "management_tasks_read",
        "description": "ViewSet for managing tasks in the management app.\nProvides full CRUD operations and task management functionality.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_tasks_update",
        "description": "ViewSet for managing tasks in the management app.\nProvides full CRUD operations and task management functionality.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_tasks_partial_update",
        "description": "ViewSet for managing tasks in the management app.\nProvides full CRUD operations and task management functionality.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskUpdate"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_tasks_delete",
        "description": "ViewSet for managing tasks in the management app.\nProvides full CRUD operations and task management functionality.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/tasks/{id}/assign/": {
      "post": {
        "operationId": "management_tasks_assign",
        "description": "Assign a task to a user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/tasks/{id}/complete_with_evidence/": {
      "post": {
        "operationId": "management_tasks_complete_with_evidence",
        "description": "Complete a task with evidence attachments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/tasks/{id}/escalate/": {
      "post": {
        "operationId": "management_tasks_escalate",
        "description": "Escalate a task.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/tasks/{id}/update_status/": {
      "post": {
        "operationId": "management_tasks_update_status",
        "description": "Update task status.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/tasks/{id}/upload_attachment/": {
      "post": {
        "operationId": "management_tasks_upload_attachment",
        "description": "Upload a file attachment to a task.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaskDetail"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/management/users/": {
      "get": {
        "operationId": "management_users_list",
        "description": "API endpoint for listing and creating users.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Account"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "post": {
        "operationId": "management_users_create",
        "description": "API endpoint for listing and creating users.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubuserAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubuserAccount"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": []
    },
    "/management/users/{id}/": {
      "get": {
        "operationId": "management_users_read",
        "description": "API endpoint for retrieving, updating and deleting users.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "put": {
        "operationId": "management_users_update",
        "description": "API endpoint for retrieving, updating and deleting users.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "patch": {
        "operationId": "management_users_partial_update",
        "description": "API endpoint for retrieving, updating and deleting users.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "tags": [
          "management"
        ]
      },
      "delete": {
        "operationId": "management_users_delete",
        "description": "API endpoint for retrieving, updating and deleting users.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "management"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/bills/": {
      "get": {
        "operationId": "members_bills_list",
        "description": "ViewSet for bill operations (residents).",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Bill"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_bills_create",
        "description": "ViewSet for bill operations (residents).",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/bills/my_bills/": {
      "get": {
        "operationId": "members_bills_my_bills",
        "description": "Get user's bills with filtering and pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Bill"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/bills/pay-bill-direct/": {
      "post": {
        "operationId": "members_bills_pay_bill_direct",
        "description": "Pay a bill directly via payment provider (Paystack/Flutterwave).\nThis is used when the cluster (estate) member does not have funds in their \nwallet and wants to pay the bill directly.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/bills/summary/": {
      "get": {
        "operationId": "members_bills_summary",
        "description": "Get user's bills summary.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Bill"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/bills/{id}/": {
      "get": {
        "operationId": "members_bills_read",
        "description": "ViewSet for bill operations (residents).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_bills_update",
        "description": "ViewSet for bill operations (residents).",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_bills_partial_update",
        "description": "ViewSet for bill operations (residents).",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_bills_delete",
        "description": "ViewSet for bill operations (residents).",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/bills/{id}/acknowledge-bill/": {
      "post": {
        "operationId": "members_bills_acknowledge_bill",
        "description": "Acknowledge a bill.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/bills/{id}/dispute-bill/": {
      "post": {
        "operationId": "members_bills_dispute_bill",
        "description": "Dispute a bill.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/bills/{id}/pay-bill/": {
      "post": {
        "operationId": "members_bills_pay_bill",
        "description": "Pay a bill using wallet balance.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/change-password/": {
      "post": {
        "operationId": "members_change-password_create",
        "description": "API endpoint for changing password.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/children/": {
      "get": {
        "operationId": "members_children_list",
        "description": "ViewSet for managing children in the members app.\nAllows residents to view and manage their own children.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Child"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_children_create",
        "description": "ViewSet for managing children in the members app.\nAllows residents to view and manage their own children.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChildCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/children/{id}/": {
      "get": {
        "operationId": "members_children_read",
        "description": "ViewSet for managing children in the members app.\nAllows residents to view and manage their own children.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Child"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_children_update",
        "description": "ViewSet for managing children in the members app.\nAllows residents to view and manage their own children.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_children_partial_update",
        "description": "ViewSet for managing children in the members app.\nAllows residents to view and manage their own children.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChildUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_children_delete",
        "description": "ViewSet for managing children in the members app.\nAllows residents to view and manage their own children.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/children/{id}/upload-photo/": {
      "post": {
        "operationId": "members_children_upload_photo",
        "description": "Upload a profile photo for the child.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Child"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Child"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/emergency-contacts/": {
      "get": {
        "operationId": "members_emergency-contacts_list",
        "description": "API endpoint for listing and creating emergency contacts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MembersEmergencyContactSerializer"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_emergency-contacts_create",
        "description": "API endpoint for listing and creating emergency contacts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/emergency-contacts/contact-types/": {
      "get": {
        "operationId": "members_emergency-contacts_contact_types",
        "description": "Get available contact types",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/emergency-contacts/emergency-types/": {
      "get": {
        "operationId": "members_emergency-contacts_emergency_types",
        "description": "Get available emergency types",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyContact"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/emergency-contacts/{id}/": {
      "get": {
        "operationId": "members_emergency-contacts_read",
        "description": "API endpoint for retrieving, updating and deleting emergency contacts.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_emergency-contacts_update",
        "description": "API endpoint for retrieving, updating and deleting emergency contacts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_emergency-contacts_partial_update",
        "description": "API endpoint for retrieving, updating and deleting emergency contacts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MembersEmergencyContactSerializer"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_emergency-contacts_delete",
        "description": "API endpoint for retrieving, updating and deleting emergency contacts.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/emergency-responses/": {
      "get": {
        "operationId": "members_emergency-responses_list",
        "description": "ViewSet for viewing emergency responses.\nMembers can only view responses to their own alerts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmergencyResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/emergency-responses/{id}/": {
      "get": {
        "operationId": "members_emergency-responses_read",
        "description": "ViewSet for viewing emergency responses.\nMembers can only view responses to their own alerts.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmergencyResponse"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/entry-exit-logs/": {
      "get": {
        "operationId": "members_entry-exit-logs_list",
        "description": "ViewSet for viewing entry/exit logs in the members app.\nAllows residents to view logs for their own children.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntryExitLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/entry-exit-logs/active-exits/": {
      "get": {
        "operationId": "members_entry-exit-logs_active_exits",
        "description": "Get all active exits (children currently out) for the current user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntryExitLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/entry-exit-logs/overdue/": {
      "get": {
        "operationId": "members_entry-exit-logs_overdue",
        "description": "Get all overdue children for the current user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntryExitLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/entry-exit-logs/{id}/": {
      "get": {
        "operationId": "members_entry-exit-logs_read",
        "description": "ViewSet for viewing entry/exit logs in the members app.\nAllows residents to view logs for their own children.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EntryExitLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/exit-requests/": {
      "get": {
        "operationId": "members_exit-requests_list",
        "description": "ViewSet for managing exit requests in the members app.\nAllows residents to create and manage exit requests for their children.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExitRequest"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_exit-requests_create",
        "description": "ViewSet for managing exit requests in the members app.\nAllows residents to create and manage exit requests for their children.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExitRequestCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExitRequestCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/exit-requests/{id}/": {
      "get": {
        "operationId": "members_exit-requests_read",
        "description": "ViewSet for managing exit requests in the members app.\nAllows residents to create and manage exit requests for their children.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExitRequest"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_exit-requests_update",
        "description": "ViewSet for managing exit requests in the members app.\nAllows residents to create and manage exit requests for their children.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExitRequestUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExitRequestUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_exit-requests_partial_update",
        "description": "ViewSet for managing exit requests in the members app.\nAllows residents to create and manage exit requests for their children.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExitRequestUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExitRequestUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_exit-requests_delete",
        "description": "ViewSet for managing exit requests in the members app.\nAllows residents to create and manage exit requests for their children.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/exit-requests/{id}/cancel/": {
      "post": {
        "operationId": "members_exit-requests_cancel",
        "description": "Cancel an exit request.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExitRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExitRequest"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/": {
      "get": {
        "operationId": "members_helpdesk_issues_list",
        "description": "List user's issues with filtering and search",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueTicketList"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_helpdesk_issues_create",
        "description": "Create a new issue ticket",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/helpdesk/issues/my-statistics/": {
      "get": {
        "operationId": "members_helpdesk_issues_my_statistics",
        "description": "Get user's issue statistics",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueTicketDetail"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/helpdesk/issues/{id}/": {
      "get": {
        "operationId": "members_helpdesk_issues_read",
        "description": "Members viewset for issue tickets.\nAllows residents to create and view their own issues.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_helpdesk_issues_update",
        "description": "Users can only update certain fields of their own issues",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_helpdesk_issues_partial_update",
        "description": "Members viewset for issue tickets.\nAllows residents to create and view their own issues.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueTicketDetail"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_helpdesk_issues_delete",
        "description": "Users cannot delete issues, only staff can",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/{issue_pk}/attachments/": {
      "get": {
        "operationId": "members_helpdesk_issues_attachments_list",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueAttachment"
                  }
                }
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_helpdesk_issues_attachments_create",
        "description": "Upload and create attachment",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentCreate"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/{issue_pk}/attachments/{id}/": {
      "get": {
        "operationId": "members_helpdesk_issues_attachments_read",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_helpdesk_issues_attachments_update",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_helpdesk_issues_attachments_partial_update",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_helpdesk_issues_attachments_delete",
        "description": "Users can only delete their own attachments",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/{issue_pk}/comments/": {
      "get": {
        "operationId": "members_helpdesk_issues_comments_list",
        "description": "List comments for an issue",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueComment"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_helpdesk_issues_comments_create",
        "description": "Create a comment on an issue",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueCommentCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueCommentCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/{issue_pk}/comments/{comment_pk}/attachments/": {
      "get": {
        "operationId": "members_helpdesk_issues_comments_attachments_list",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IssueAttachment"
                  }
                }
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_helpdesk_issues_comments_attachments_create",
        "description": "Upload and create attachment",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentCreate"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/{issue_pk}/comments/{comment_pk}/attachments/{id}/": {
      "get": {
        "operationId": "members_helpdesk_issues_comments_attachments_read",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_helpdesk_issues_comments_attachments_update",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_helpdesk_issues_comments_attachments_partial_update",
        "description": "Members viewset for issue attachments.\nAllows residents to upload attachments to their own issues.",
        "parameters": [
          {
            "name": "file_name",
            "in": "formData",
            "description": "Original name of the uploaded file",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "file_url",
            "in": "formData",
            "description": "URL to access the uploaded file",
            "required": true,
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "file_size",
            "in": "formData",
            "description": "Size of the file in bytes",
            "required": true,
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "name": "file_type",
            "in": "formData",
            "description": "MIME type of the file",
            "required": true,
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueAttachment"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_helpdesk_issues_comments_attachments_delete",
        "description": "Users can only delete their own attachments",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/helpdesk/issues/{issue_pk}/comments/{id}/": {
      "get": {
        "operationId": "members_helpdesk_issues_comments_read",
        "description": "Members viewset for issue comments.\nAllows residents to comment on their own issues.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_helpdesk_issues_comments_update",
        "description": "Users can only update their own comments",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_helpdesk_issues_comments_partial_update",
        "description": "Members viewset for issue comments.\nAllows residents to comment on their own issues.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IssueComment"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_helpdesk_issues_comments_delete",
        "description": "Users can only delete their own comments",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "issue_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/invitations/": {
      "get": {
        "operationId": "members_invitations_list",
        "description": "ViewSet for managing invitations in the members app.\nAllows residents to view and manage their own invitations.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Invitation"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_invitations_create",
        "description": "ViewSet for managing invitations in the members app.\nAllows residents to view and manage their own invitations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/invitations/{id}/": {
      "get": {
        "operationId": "members_invitations_read",
        "description": "ViewSet for managing invitations in the members app.\nAllows residents to view and manage their own invitations.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_invitations_update",
        "description": "ViewSet for managing invitations in the members app.\nAllows residents to view and manage their own invitations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_invitations_partial_update",
        "description": "ViewSet for managing invitations in the members app.\nAllows residents to view and manage their own invitations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_invitations_delete",
        "description": "ViewSet for managing invitations in the members app.\nAllows residents to view and manage their own invitations.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/invitations/{id}/revoke/": {
      "post": {
        "operationId": "members_invitations_revoke",
        "description": "Revoke an invitation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationRevoke"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitationRevoke"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/login/": {
      "post": {
        "operationId": "members_login_create",
        "description": "API endpoint for member login.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/maintenance-requests/": {
      "get": {
        "operationId": "members_maintenance-requests_list",
        "description": "ViewSet for managing maintenance logs for members.\nProvides CRUD operations and custom actions for attachments, comments, history, and status.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_maintenance-requests_create",
        "description": "ViewSet for managing maintenance logs for members.\nProvides CRUD operations and custom actions for attachments, comments, history, and status.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLogCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLogCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/maintenance-requests/history/": {
      "get": {
        "operationId": "members_maintenance-requests_history",
        "description": "Get maintenance history for properties associated with the current user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MaintenanceLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/maintenance-requests/{id}/": {
      "get": {
        "operationId": "members_maintenance-requests_read",
        "description": "ViewSet for managing maintenance logs for members.\nProvides CRUD operations and custom actions for attachments, comments, history, and status.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_maintenance-requests_update",
        "description": "ViewSet for managing maintenance logs for members.\nProvides CRUD operations and custom actions for attachments, comments, history, and status.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_maintenance-requests_partial_update",
        "description": "ViewSet for managing maintenance logs for members.\nProvides CRUD operations and custom actions for attachments, comments, history, and status.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLogUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_maintenance-requests_delete",
        "description": "ViewSet for managing maintenance logs for members.\nProvides CRUD operations and custom actions for attachments, comments, history, and status.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/maintenance-requests/{id}/attachments/": {
      "get": {
        "operationId": "members_maintenance-requests_attachments",
        "description": "Get attachments for a maintenance request.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/maintenance-requests/{id}/comments/": {
      "get": {
        "operationId": "members_maintenance-requests_comments_read",
        "description": "Get comments for a maintenance request or add a new comment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_maintenance-requests_comments_create",
        "description": "Get comments for a maintenance request or add a new comment.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/maintenance-requests/{id}/status/": {
      "get": {
        "operationId": "members_maintenance-requests_status",
        "description": "Get the current status of a maintenance request.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/maintenance-requests/{id}/upload-attachment/": {
      "post": {
        "operationId": "members_maintenance-requests_upload_attachment",
        "description": "Upload an attachment for a maintenance request.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "Brief title describing the maintenance activity",
            "required": true,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Detailed description of the maintenance work performed",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "maintenance_type",
            "in": "formData",
            "description": "Type of maintenance activity",
            "required": false,
            "type": "string",
            "enum": [
              "PREVENTIVE",
              "CORRECTIVE",
              "EMERGENCY",
              "ROUTINE",
              "INSPECTION",
              "UPGRADE",
              "OTHER"
            ]
          },
          {
            "name": "property_type",
            "in": "formData",
            "description": "Type of property or equipment maintained",
            "required": false,
            "type": "string",
            "enum": [
              "BUILDING",
              "ELECTRICAL",
              "PLUMBING",
              "HVAC",
              "SECURITY",
              "LANDSCAPING",
              "EQUIPMENT",
              "INFRASTRUCTURE",
              "OTHER"
            ]
          },
          {
            "name": "property_location",
            "in": "formData",
            "description": "Specific location of the property or equipment",
            "required": true,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "equipment_name",
            "in": "formData",
            "description": "Name or model of the equipment (if applicable)",
            "required": false,
            "type": "string",
            "maxLength": 200
          },
          {
            "name": "priority",
            "in": "formData",
            "description": "Priority level of the maintenance",
            "required": false,
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "URGENT"
            ]
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Current status of the maintenance",
            "required": false,
            "type": "string",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "POSTPONED"
            ]
          },
          {
            "name": "scheduled_date",
            "in": "formData",
            "description": "Scheduled date and time for the maintenance",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "started_at",
            "in": "formData",
            "description": "Timestamp when maintenance was started",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "completed_at",
            "in": "formData",
            "description": "Timestamp when maintenance was completed",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "estimated_duration",
            "in": "formData",
            "description": "Estimated time to complete the maintenance",
            "required": false,
            "type": "string",
            "x-nullable": true
          },
          {
            "name": "actual_duration",
            "in": "formData",
            "description": "Actual time spent on the maintenance",
            "required": false,
            "type": "string",
            "x-nullable": true
          },
          {
            "name": "cost",
            "in": "formData",
            "description": "Total cost of the maintenance",
            "required": false,
            "type": "string",
            "format": "decimal",
            "x-nullable": true
          },
          {
            "name": "materials_used",
            "in": "formData",
            "description": "List of materials and parts used",
            "required": false,
            "type": "string"
          },
          {
            "name": "tools_used",
            "in": "formData",
            "description": "List of tools and equipment used",
            "required": false,
            "type": "string"
          },
          {
            "name": "notes",
            "in": "formData",
            "description": "Additional notes about the maintenance",
            "required": false,
            "type": "string"
          },
          {
            "name": "completion_notes",
            "in": "formData",
            "description": "Notes about maintenance completion and results",
            "required": false,
            "type": "string"
          },
          {
            "name": "next_maintenance_due",
            "in": "formData",
            "description": "When the next maintenance is due for this item",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "name": "warranty_expiry",
            "in": "formData",
            "description": "Warranty expiry date for the equipment",
            "required": false,
            "type": "string",
            "format": "date",
            "x-nullable": true
          },
          {
            "name": "is_under_warranty",
            "in": "formData",
            "description": "Whether the equipment is still under warranty",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MaintenanceLog"
            }
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "UUID primary key",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/members/profile/": {
      "get": {
        "operationId": "members_profile_read",
        "description": "API endpoint for member profile management.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MemberProfile"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_profile_update",
        "description": "API endpoint for member profile management.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MemberProfile"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_profile_partial_update",
        "description": "API endpoint for member profile management.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MemberProfile"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/profile/upload-picture/": {
      "post": {
        "operationId": "members_profile_upload-picture_create",
        "description": "API endpoint for uploading profile pictures.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/profile/verify-update/request/": {
      "post": {
        "operationId": "members_profile_verify-update_request_create",
        "description": "API endpoint to request verification for profile updates.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/profile/verify-update/verify/": {
      "post": {
        "operationId": "members_profile_verify-update_verify_create",
        "description": "API endpoint to verify profile updates with OTP/token.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/": {
      "post": {
        "operationId": "members_recurring-payments_create",
        "description": "Create a new recurring payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/cancel-payment/": {
      "post": {
        "operationId": "members_recurring-payments_cancel",
        "description": "Cancel a recurring payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/my-payments/": {
      "get": {
        "operationId": "members_recurring-payments_my_payments",
        "description": "Get user's recurring payments with filtering and pagination.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/pause-payment/": {
      "post": {
        "operationId": "members_recurring-payments_pause",
        "description": "Pause a recurring payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/resume-payment/": {
      "post": {
        "operationId": "members_recurring-payments_resume",
        "description": "Resume a paused recurring payment.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/summary/": {
      "get": {
        "operationId": "members_recurring-payments_summary",
        "description": "Get user's recurring payments summary.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/recurring-payments/{id}/": {
      "put": {
        "operationId": "members_recurring-payments_update",
        "description": "Update a recurring payment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/register/": {
      "post": {
        "operationId": "members_register_create",
        "description": "API endpoint for member registration.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberRegistration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MemberRegistration"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/reset-password/request/": {
      "post": {
        "operationId": "members_reset-password_request_create",
        "description": "API endpoint to request a password reset.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/reset-password/reset/": {
      "post": {
        "operationId": "members_reset-password_reset_create",
        "description": "API endpoint to reset password using a verification token/OTP.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/sos-alerts/": {
      "get": {
        "operationId": "members_sos-alerts_list",
        "description": "ViewSet for managing SOS alerts.\nMembers can create and view their own alerts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_sos-alerts_create",
        "description": "ViewSet for managing SOS alerts.\nMembers can create and view their own alerts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlertCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlertCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/sos-alerts/active/": {
      "get": {
        "operationId": "members_sos-alerts_active",
        "description": "Get active alerts for the current user",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/sos-alerts/emergency-types/": {
      "get": {
        "operationId": "members_sos-alerts_emergency_types",
        "description": "Get available emergency types",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SOSAlert"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/sos-alerts/{id}/": {
      "get": {
        "operationId": "members_sos-alerts_read",
        "description": "ViewSet for managing SOS alerts.\nMembers can create and view their own alerts.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_sos-alerts_update",
        "description": "ViewSet for managing SOS alerts.\nMembers can create and view their own alerts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_sos-alerts_partial_update",
        "description": "ViewSet for managing SOS alerts.\nMembers can create and view their own alerts.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlertUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_sos-alerts_delete",
        "description": "ViewSet for managing SOS alerts.\nMembers can create and view their own alerts.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/sos-alerts/{id}/cancel/": {
      "post": {
        "operationId": "members_sos-alerts_cancel",
        "description": "Cancel an SOS alert",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/sos-alerts/{id}/incident-report/": {
      "get": {
        "operationId": "members_sos-alerts_incident_report",
        "description": "Generate detailed incident report for user's own alert",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/sos-alerts/{id}/responses/": {
      "get": {
        "operationId": "members_sos-alerts_responses",
        "description": "Get responses for a specific alert",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SOSAlert"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/verify-phone/request/": {
      "post": {
        "operationId": "members_verify-phone_request_create",
        "description": "API endpoint to request phone verification.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/verify-phone/verify/": {
      "post": {
        "operationId": "members_verify-phone_verify_create",
        "description": "API endpoint to verify phone number with OTP.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/visitor-logs/": {
      "get": {
        "operationId": "members_visitor-logs_list",
        "description": "ViewSet for managing visitor logs in the members app.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VisitorLog"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_visitor-logs_create",
        "description": "ViewSet for managing visitor logs in the members app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/visitor-logs/{id}/": {
      "get": {
        "operationId": "members_visitor-logs_read",
        "description": "ViewSet for managing visitor logs in the members app.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_visitor-logs_update",
        "description": "ViewSet for managing visitor logs in the members app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_visitor-logs_partial_update",
        "description": "ViewSet for managing visitor logs in the members app.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorLog"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_visitor-logs_delete",
        "description": "ViewSet for managing visitor logs in the members app.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/visitors/": {
      "get": {
        "operationId": "members_visitors_list",
        "description": "ViewSet for managing visitors in the members app.\nAllows residents to view and manage their own visitors.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Visitor"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "members_visitors_create",
        "description": "ViewSet for managing visitors in the members app.\nAllows residents to view and manage their own visitors.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorCreate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/visitors/{id}/": {
      "get": {
        "operationId": "members_visitors_read",
        "description": "ViewSet for managing visitors in the members app.\nAllows residents to view and manage their own visitors.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Visitor"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "members_visitors_update",
        "description": "ViewSet for managing visitors in the members app.\nAllows residents to view and manage their own visitors.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "patch": {
        "operationId": "members_visitors_partial_update",
        "description": "ViewSet for managing visitors in the members app.\nAllows residents to view and manage their own visitors.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VisitorUpdate"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "members_visitors_delete",
        "description": "ViewSet for managing visitors in the members app.\nAllows residents to view and manage their own visitors.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/visitors/{id}/revoke-invitation/": {
      "post": {
        "operationId": "members_visitors_revoke_invitation",
        "description": "Revoke a visitor invitation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Visitor"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Visitor"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/members/wallet/balance/": {
      "get": {
        "operationId": "members_wallet_balance",
        "description": "Get user's wallet balance.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/wallet/deposit/": {
      "post": {
        "operationId": "members_wallet_deposit",
        "description": "Initialize a wallet deposit.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/members/wallet/transactions/": {
      "get": {
        "operationId": "members_wallet_transactions",
        "description": "Get user's transaction history with filtering and pagination.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "members"
        ]
      },
      "parameters": []
    },
    "/roles/": {
      "get": {
        "operationId": "roles_list",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "post": {
        "operationId": "roles_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": []
    },
    "/roles/{id}/": {
      "get": {
        "operationId": "roles_read",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "put": {
        "operationId": "roles_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "patch": {
        "operationId": "roles_partial_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "delete": {
        "operationId": "roles_delete",
        "description": "",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    }
  },
  "definitions": {
    "Account": {
      "required": [
        "email_address",
        "name",
        "phone_number"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 100,
          "minLength": 1
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "maxLength": 16,
          "minLength": 4
        },
        "profile_image_url": {
          "title": "Profile image url",
          "description": "Profile image of the user.",
          "type": "string",
          "format": "uri",
          "maxLength": 200
        },
        "is_verified": {
          "title": "Is verified?",
          "description": "Has this user completed email verification flow?",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "StaffAccount": {
      "required": [
        "email_address",
        "name",
        "phone_number",
        "roles"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 100,
          "minLength": 1
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "maxLength": 16,
          "minLength": 4
        },
        "profile_image_url": {
          "title": "Profile image url",
          "description": "Profile image of the user.",
          "type": "string",
          "format": "uri",
          "maxLength": 200
        },
        "is_verified": {
          "title": "Is verified?",
          "description": "Has this user completed email verification flow?",
          "type": "boolean",
          "readOnly": true
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "integer",
            "x-nullable": true
          },
          "uniqueItems": true
        }
      }
    },
    "SubuserAccount": {
      "required": [
        "email_address",
        "name",
        "phone_number"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 100,
          "minLength": 1
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "maxLength": 16,
          "minLength": 4
        },
        "profile_image_url": {
          "title": "Profile image url",
          "description": "Profile image of the user.",
          "type": "string",
          "format": "uri",
          "maxLength": 200
        },
        "is_verified": {
          "title": "Is verified?",
          "description": "Has this user completed email verification flow?",
          "type": "boolean",
          "readOnly": true
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "x-nullable": true
          },
          "uniqueItems": true
        }
      }
    },
    "PasswordChange": {
      "required": [
        "current_password",
        "new_password"
      ],
      "type": "object",
      "properties": {
        "current_password": {
          "title": "Current password",
          "type": "string",
          "minLength": 8
        },
        "new_password": {
          "title": "New password",
          "type": "string",
          "minLength": 8
        },
        "force_logout": {
          "title": "Force logout",
          "type": "boolean",
          "default": false
        }
      }
    },
    "EmailVerification": {
      "required": [
        "email_address",
        "verify_mode"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "verify_mode": {
          "title": "Verify mode",
          "type": "string",
          "enum": [
            "OTP",
            "TOKEN"
          ]
        }
      }
    },
    "ResidentImportedData": {
      "required": [
        "column_mapping",
        "has_headers"
      ],
      "type": "object",
      "properties": {
        "column_mapping": {
          "title": "Column mapping",
          "description": "A mapping of column header name or index to the Imported Django model entity attribute name.For example, a file can have a header 'The customers first name'. The correct mapping would be{ 'The customers first name': 'first_name' }",
          "type": "object"
        },
        "format": {
          "title": "Format",
          "description": "Optional format of the file. If not provided, the format will be guessed. This will only work if the file name has a suffix",
          "type": "string",
          "enum": [
            "CSV",
            "XLSX",
            "XLS"
          ]
        },
        "has_headers": {
          "title": "Has headers",
          "description": "Does the file have headers?",
          "type": "boolean"
        },
        "file": {
          "title": "File",
          "description": "The file to be imported. This file will not be saved permanently. It will only be used to read the import data after which it should be discarded.",
          "type": "string",
          "readOnly": true,
          "format": "uri"
        },
        "should_upsert": {
          "title": "Should upsert",
          "description": "Should we use the imported data to update data that already exist in your account?",
          "type": "boolean",
          "default": true
        },
        "default_dialing_code": {
          "title": "Default dialing code",
          "description": "The default dialing code of imported phone number without dialing code prefix. If you are importing a column with phone numbers, we require the phone numbers to be in E.164 format and have prefix",
          "type": "string",
          "pattern": "^\\+\\d{1,4}$",
          "default": "",
          "maxLength": 5,
          "minLength": 2
        }
      }
    },
    "OwnerAccount": {
      "required": [
        "email_address",
        "name",
        "phone_number",
        "password"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 100,
          "minLength": 1
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "maxLength": 16,
          "minLength": 4
        },
        "profile_image_url": {
          "title": "Profile image url",
          "description": "Profile image of the user.",
          "type": "string",
          "format": "uri",
          "maxLength": 200
        },
        "is_verified": {
          "title": "Is verified?",
          "description": "Has this user completed email verification flow?",
          "type": "boolean",
          "readOnly": true
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 1
        },
        "property_owner": {
          "title": "Property owner",
          "type": "boolean",
          "default": false
        }
      }
    },
    "ClusterAdminAccount": {
      "required": [
        "name",
        "admin"
      ],
      "type": "object",
      "properties": {
        "type": {
          "title": "Cluster type",
          "description": "Type of property cluster",
          "type": "string",
          "enum": [
            "ESTATE",
            "FACILITY",
            "COMMERCIAL",
            "MIXED_USE"
          ]
        },
        "name": {
          "title": "Cluster name",
          "description": "Name of the cluster",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "admin": {
          "$ref": "#/definitions/OwnerAccount"
        }
      }
    },
    "_AuthTokenPair": {
      "required": [
        "access",
        "refresh"
      ],
      "type": "object",
      "properties": {
        "access": {
          "title": "Access",
          "type": "string",
          "minLength": 1
        },
        "refresh": {
          "title": "Refresh",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ForgotPassword": {
      "required": [
        "email_address"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "mode": {
          "title": "Mode",
          "description": "The type of key to be used for verification",
          "type": "string",
          "enum": [
            "OTP",
            "TOKEN",
            "SMS"
          ],
          "default": "OTP"
        }
      }
    },
    "ResetPassword": {
      "required": [
        "verification_key",
        "password"
      ],
      "type": "object",
      "properties": {
        "verification_key": {
          "title": "Verification key",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 8
        },
        "force_logout": {
          "title": "Force logout",
          "type": "boolean",
          "default": false
        }
      }
    },
    "AuthTokenPair": {
      "required": [
        "email_address",
        "password"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "TokenRefresh": {
      "required": [
        "refresh"
      ],
      "type": "object",
      "properties": {
        "refresh": {
          "title": "Refresh",
          "type": "string",
          "minLength": 1
        },
        "access": {
          "title": "Access",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "UtilityBill": {
      "required": [
        "title",
        "type",
        "amount",
        "due_date"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bill_number": {
          "title": "Bill number",
          "description": "Unique bill number",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "title": {
          "title": "Title",
          "description": "Bill title",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Bill description",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "title": "Type",
          "description": "Type of bill",
          "type": "string",
          "enum": [
            "electricity",
            "water",
            "security",
            "maintenance",
            "service_charge",
            "waste_management",
            "electricity_utility",
            "water_utility",
            "internet_utility",
            "cable_tv_utility",
            "other"
          ]
        },
        "category": {
          "title": "Category",
          "description": "Bill category (cluster-managed or user-managed)",
          "type": "string",
          "enum": [
            "cluster_managed",
            "user_managed"
          ]
        },
        "amount": {
          "title": "Amount",
          "description": "Bill amount",
          "type": "string",
          "format": "decimal"
        },
        "currency": {
          "title": "Currency",
          "description": "Currency code",
          "type": "string",
          "maxLength": 3,
          "minLength": 1
        },
        "utility_provider": {
          "title": "Utility provider",
          "description": "Utility provider for user-managed bills",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "utility_provider_name": {
          "title": "Utility provider name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "customer_id": {
          "title": "Customer ID",
          "description": "Customer ID/meter number for utility bills",
          "type": "string",
          "maxLength": 100,
          "x-nullable": true
        },
        "is_automated": {
          "title": "Is automated",
          "description": "Whether this bill has automated recurring payments",
          "type": "boolean"
        },
        "due_date": {
          "title": "Due date",
          "description": "Bill due date",
          "type": "string",
          "format": "date-time"
        },
        "paid_amount": {
          "title": "Paid amount",
          "description": "Amount already paid",
          "type": "string",
          "format": "decimal",
          "readOnly": true
        },
        "remaining_amount": {
          "title": "Remaining amount",
          "type": "string",
          "format": "decimal",
          "readOnly": true
        },
        "paid_at": {
          "title": "Paid at",
          "description": "Date and time when bill was paid",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "boolean",
          "readOnly": true
        },
        "metadata": {
          "title": "Metadata",
          "description": "Additional bill metadata",
          "type": "object",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "UtilityProvider": {
      "required": [
        "name",
        "provider_type",
        "api_provider",
        "provider_code"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "description": "Utility provider name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "provider_type": {
          "title": "Provider type",
          "description": "Type of utility service provided",
          "type": "string",
          "enum": [
            "electricity",
            "water",
            "security",
            "maintenance",
            "service_charge",
            "waste_management",
            "electricity_utility",
            "water_utility",
            "internet_utility",
            "cable_tv_utility",
            "other"
          ]
        },
        "api_provider": {
          "title": "API provider",
          "description": "Payment API provider (Paystack/Flutterwave)",
          "type": "string",
          "enum": [
            "paystack",
            "flutterwave",
            "bank_transfer",
            "cash"
          ]
        },
        "provider_code": {
          "title": "Provider code",
          "description": "Unique provider code for API calls (e.g., 'ikeja-electric')",
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether this provider is currently active",
          "type": "boolean"
        },
        "supports_validation": {
          "title": "Supports validation",
          "description": "Whether this provider supports customer validation",
          "type": "boolean"
        },
        "supports_info_lookup": {
          "title": "Supports info lookup",
          "description": "Whether this provider supports customer info lookup",
          "type": "boolean"
        },
        "minimum_amount": {
          "title": "Minimum amount",
          "description": "Minimum payment amount",
          "type": "string",
          "format": "decimal"
        },
        "maximum_amount": {
          "title": "Maximum amount",
          "description": "Maximum payment amount",
          "type": "string",
          "format": "decimal"
        },
        "metadata": {
          "title": "Metadata",
          "description": "Additional provider metadata and configuration",
          "type": "object",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "RecurringUtilityPayment": {
      "required": [
        "title",
        "amount",
        "frequency",
        "start_date",
        "next_payment_date"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "title": {
          "title": "Title",
          "description": "Recurring payment title",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Recurring payment description",
          "type": "string",
          "x-nullable": true
        },
        "amount": {
          "title": "Amount",
          "description": "Payment amount",
          "type": "string",
          "format": "decimal"
        },
        "currency": {
          "title": "Currency",
          "description": "Currency code",
          "type": "string",
          "maxLength": 3,
          "minLength": 1
        },
        "frequency": {
          "title": "Frequency",
          "description": "Payment frequency",
          "type": "string",
          "enum": [
            "daily",
            "weekly",
            "monthly",
            "quarterly",
            "yearly"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current recurring payment status",
          "type": "string",
          "enum": [
            "active",
            "paused",
            "cancelled",
            "expired"
          ]
        },
        "utility_provider": {
          "title": "Utility provider",
          "description": "Utility provider for automated utility payments",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "utility_provider_name": {
          "title": "Utility provider name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "customer_id": {
          "title": "Customer ID",
          "description": "Customer ID/meter number for utility payments",
          "type": "string",
          "maxLength": 100,
          "x-nullable": true
        },
        "payment_source": {
          "title": "Payment source",
          "description": "Source of payment (wallet or direct)",
          "type": "string",
          "enum": [
            "wallet",
            "direct"
          ]
        },
        "spending_limit": {
          "title": "Spending limit",
          "description": "Maximum amount that can be spent per payment",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "start_date": {
          "title": "Start date",
          "description": "Date when recurring payments should start",
          "type": "string",
          "format": "date-time"
        },
        "end_date": {
          "title": "End date",
          "description": "Date when recurring payments should end (optional)",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "next_payment_date": {
          "title": "Next payment date",
          "description": "Date of the next scheduled payment",
          "type": "string",
          "format": "date-time"
        },
        "last_payment_date": {
          "title": "Last payment date",
          "description": "Date of the last successful payment",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "total_payments": {
          "title": "Total payments",
          "description": "Total number of successful payments made",
          "type": "integer",
          "readOnly": true
        },
        "failed_attempts": {
          "title": "Failed attempts",
          "description": "Number of consecutive failed payment attempts",
          "type": "integer",
          "readOnly": true
        },
        "max_failed_attempts": {
          "title": "Max failed attempts",
          "description": "Maximum failed attempts before pausing",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "next_payment_in_days": {
          "title": "Next payment in days",
          "type": "string",
          "readOnly": true
        },
        "can_be_paused": {
          "title": "Can be paused",
          "type": "string",
          "readOnly": true
        },
        "can_be_resumed": {
          "title": "Can be resumed",
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "title": "Metadata",
          "description": "Additional recurring payment metadata",
          "type": "object",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "AnnouncementAttachment": {
      "required": [
        "file_name",
        "file_url",
        "file_size",
        "file_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "file_name": {
          "title": "File name",
          "description": "Original name of the uploaded file",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "file_url": {
          "title": "File URL",
          "description": "URL to access the uploaded file",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "file_size": {
          "title": "File size",
          "description": "Size of the file in bytes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "file_size_formatted": {
          "title": "File size formatted",
          "type": "string",
          "readOnly": true
        },
        "file_type": {
          "title": "File type",
          "description": "MIME type of the file",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "is_image": {
          "title": "Is image",
          "description": "Whether this attachment is an image",
          "type": "boolean"
        },
        "preview_type": {
          "title": "Preview type",
          "type": "string",
          "readOnly": true
        },
        "can_preview": {
          "title": "Can preview",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "AnnouncementComment": {
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "content": {
          "title": "Content",
          "description": "Content of the comment",
          "type": "string",
          "maxLength": 1000,
          "minLength": 1
        },
        "author_id": {
          "title": "Author ID",
          "description": "ID of the user who created the comment",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "author_name": {
          "title": "Author name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Announcement": {
      "required": [
        "title",
        "content"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "title": {
          "title": "Title",
          "description": "Title of the announcement",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "content": {
          "title": "Content",
          "description": "Content of the announcement",
          "type": "string",
          "maxLength": 2000,
          "minLength": 1
        },
        "category": {
          "title": "Category",
          "description": "Category of the announcement",
          "type": "string",
          "enum": [
            "News",
            "Estate Issues",
            "Others"
          ]
        },
        "author_id": {
          "title": "Author ID",
          "description": "ID of the user who created the announcement",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "author_name": {
          "title": "Author name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "views_count": {
          "title": "Views count",
          "description": "Number of times this announcement has been viewed",
          "type": "integer",
          "readOnly": true
        },
        "likes_count": {
          "title": "Likes count",
          "description": "Number of likes this announcement has received",
          "type": "integer",
          "readOnly": true
        },
        "comments_count": {
          "title": "Comments count",
          "description": "Number of comments on this announcement",
          "type": "integer",
          "readOnly": true
        },
        "published_at": {
          "title": "Published at",
          "description": "When the announcement was published",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "expires_at": {
          "title": "Expires at",
          "description": "When the announcement expires",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_published": {
          "title": "Is published",
          "description": "Whether the announcement is published",
          "type": "boolean"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnouncementAttachment"
          },
          "readOnly": true
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnouncementComment"
          },
          "readOnly": true
        },
        "is_liked_by_user": {
          "title": "Is liked by user",
          "type": "string",
          "readOnly": true
        },
        "is_read_by_user": {
          "title": "Is read by user",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "AnnouncementCreate": {
      "required": [
        "title",
        "content"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Title of the announcement",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "content": {
          "title": "Content",
          "description": "Content of the announcement",
          "type": "string",
          "maxLength": 2000,
          "minLength": 1
        },
        "category": {
          "title": "Category",
          "description": "Category of the announcement",
          "type": "string",
          "enum": [
            "News",
            "Estate Issues",
            "Others"
          ]
        },
        "published_at": {
          "title": "Published at",
          "description": "When the announcement was published",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "expires_at": {
          "title": "Expires at",
          "description": "When the announcement expires",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_published": {
          "title": "Is published",
          "description": "Whether the announcement is published",
          "type": "boolean"
        },
        "attachment_ids": {
          "description": "List of pre-uploaded attachment IDs to link to the announcement",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "AnnouncementUpdate": {
      "required": [
        "title",
        "content"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Title of the announcement",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "content": {
          "title": "Content",
          "description": "Content of the announcement",
          "type": "string",
          "maxLength": 2000,
          "minLength": 1
        },
        "category": {
          "title": "Category",
          "description": "Category of the announcement",
          "type": "string",
          "enum": [
            "News",
            "Estate Issues",
            "Others"
          ]
        },
        "published_at": {
          "title": "Published at",
          "description": "When the announcement was published",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "expires_at": {
          "title": "Expires at",
          "description": "When the announcement expires",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_published": {
          "title": "Is published",
          "description": "Whether the announcement is published",
          "type": "boolean"
        }
      }
    },
    "Child": {
      "required": [
        "name",
        "date_of_birth",
        "gender",
        "house_number",
        "parent"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Child name",
          "description": "Full name of the child",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "date_of_birth": {
          "title": "Date of birth",
          "description": "Date of birth of the child",
          "type": "string",
          "format": "date"
        },
        "gender": {
          "title": "Gender",
          "description": "Gender of the child",
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "profile_photo": {
          "title": "Profile photo",
          "description": "URL to the child's profile photo",
          "type": "string",
          "format": "uri",
          "maxLength": 500,
          "x-nullable": true
        },
        "house_number": {
          "title": "House number",
          "description": "House/unit number where the child lives",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "parent": {
          "title": "Parent/guardian",
          "description": "Parent or guardian of the child",
          "type": "string",
          "format": "uuid"
        },
        "parent_name": {
          "title": "Parent name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "emergency_contacts": {
          "title": "Emergency contacts",
          "description": "List of emergency contact information",
          "type": "object"
        },
        "emergency_contacts_display": {
          "title": "Emergency contacts display",
          "type": "string",
          "readOnly": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether the child is currently active in the system",
          "type": "boolean"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the child",
          "type": "string"
        },
        "age": {
          "title": "Age",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ChildCreate": {
      "required": [
        "name",
        "date_of_birth",
        "gender",
        "house_number"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Child name",
          "description": "Full name of the child",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "date_of_birth": {
          "title": "Date of birth",
          "description": "Date of birth of the child",
          "type": "string",
          "format": "date"
        },
        "gender": {
          "title": "Gender",
          "description": "Gender of the child",
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "profile_photo": {
          "title": "Profile photo",
          "description": "URL to the child's profile photo",
          "type": "string",
          "format": "uri",
          "maxLength": 500,
          "x-nullable": true
        },
        "house_number": {
          "title": "House number",
          "description": "House/unit number where the child lives",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "emergency_contacts": {
          "title": "Emergency contacts",
          "description": "List of emergency contact information",
          "type": "object"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the child",
          "type": "string"
        }
      }
    },
    "ChildUpdate": {
      "required": [
        "name",
        "date_of_birth",
        "gender",
        "house_number"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Child name",
          "description": "Full name of the child",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "date_of_birth": {
          "title": "Date of birth",
          "description": "Date of birth of the child",
          "type": "string",
          "format": "date"
        },
        "gender": {
          "title": "Gender",
          "description": "Gender of the child",
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "profile_photo": {
          "title": "Profile photo",
          "description": "URL to the child's profile photo",
          "type": "string",
          "format": "uri",
          "maxLength": 500,
          "x-nullable": true
        },
        "house_number": {
          "title": "House number",
          "description": "House/unit number where the child lives",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "emergency_contacts": {
          "title": "Emergency contacts",
          "description": "List of emergency contact information",
          "type": "object"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether the child is currently active in the system",
          "type": "boolean"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the child",
          "type": "string"
        }
      }
    },
    "EmergencyContact": {
      "required": [
        "name",
        "phone_number"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Contact name",
          "description": "Name of the emergency contact",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "Contact phone number",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Contact email address (optional)",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "emergency_types": {
          "title": "Emergency types",
          "description": "List of emergency types this contact handles",
          "type": "object"
        },
        "emergency_types_display": {
          "title": "Emergency types display",
          "type": "string",
          "readOnly": true
        },
        "contact_type": {
          "title": "Contact type",
          "description": "Type of emergency contact",
          "type": "string",
          "enum": [
            "personal",
            "estate_wide",
            "official"
          ]
        },
        "contact_type_display": {
          "title": "Contact type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user": {
          "title": "User",
          "description": "User who owns this contact (null for estate-wide contacts)",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether this contact is active and should receive alerts",
          "type": "boolean"
        },
        "is_primary": {
          "title": "Is primary",
          "description": "Whether this is a primary contact for the emergency types",
          "type": "boolean"
        },
        "response_time_minutes": {
          "title": "Expected response time",
          "description": "Expected response time in minutes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0,
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about this contact",
          "type": "string"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "EmergencyContactCreate": {
      "required": [
        "name",
        "phone_number"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Contact name",
          "description": "Name of the emergency contact",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "Contact phone number",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Contact email address (optional)",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "emergency_types": {
          "title": "Emergency types",
          "description": "List of emergency types this contact handles",
          "type": "object"
        },
        "contact_type": {
          "title": "Contact type",
          "description": "Type of emergency contact",
          "type": "string",
          "enum": [
            "personal",
            "estate_wide",
            "official"
          ]
        },
        "user": {
          "title": "User",
          "description": "User who owns this contact (null for estate-wide contacts)",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether this contact is active and should receive alerts",
          "type": "boolean"
        },
        "is_primary": {
          "title": "Is primary",
          "description": "Whether this is a primary contact for the emergency types",
          "type": "boolean"
        },
        "response_time_minutes": {
          "title": "Expected response time",
          "description": "Expected response time in minutes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0,
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about this contact",
          "type": "string"
        }
      }
    },
    "EmergencyContactUpdate": {
      "required": [
        "name",
        "phone_number"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Contact name",
          "description": "Name of the emergency contact",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "Contact phone number",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Contact email address (optional)",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "emergency_types": {
          "title": "Emergency types",
          "description": "List of emergency types this contact handles",
          "type": "object"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether this contact is active and should receive alerts",
          "type": "boolean"
        },
        "is_primary": {
          "title": "Is primary",
          "description": "Whether this is a primary contact for the emergency types",
          "type": "boolean"
        },
        "response_time_minutes": {
          "title": "Expected response time",
          "description": "Expected response time in minutes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0,
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about this contact",
          "type": "string"
        }
      }
    },
    "EmergencyResponse": {
      "required": [
        "alert",
        "responder",
        "response_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "alert": {
          "title": "Alert",
          "description": "The alert this response is for",
          "type": "string",
          "format": "uuid"
        },
        "alert_id": {
          "title": "Alert id",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "responder": {
          "title": "Responder",
          "description": "User who responded",
          "type": "string",
          "format": "uuid"
        },
        "responder_name": {
          "title": "Responder name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "response_type": {
          "title": "Response type",
          "description": "Type of response",
          "type": "string",
          "enum": [
            "acknowledged",
            "dispatched",
            "on_scene",
            "resolved",
            "cancelled"
          ]
        },
        "response_type_display": {
          "title": "Response type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "notes": {
          "title": "Notes",
          "description": "Response notes",
          "type": "string"
        },
        "estimated_arrival": {
          "title": "Estimated arrival",
          "description": "Estimated arrival time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "actual_arrival": {
          "title": "Actual arrival",
          "description": "Actual arrival time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "EmergencyResponseCreate": {
      "required": [
        "alert",
        "response_type"
      ],
      "type": "object",
      "properties": {
        "alert": {
          "title": "Alert",
          "description": "The alert this response is for",
          "type": "string",
          "format": "uuid"
        },
        "response_type": {
          "title": "Response type",
          "description": "Type of response",
          "type": "string",
          "enum": [
            "acknowledged",
            "dispatched",
            "on_scene",
            "resolved",
            "cancelled"
          ]
        },
        "notes": {
          "title": "Notes",
          "description": "Response notes",
          "type": "string"
        },
        "estimated_arrival": {
          "title": "Estimated arrival",
          "description": "Estimated arrival time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "actual_arrival": {
          "title": "Actual arrival",
          "description": "Actual arrival time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "Event": {
      "required": [
        "title",
        "event_date",
        "event_time",
        "location",
        "created_by"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "title": {
          "title": "Title",
          "description": "Title of the event",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the event",
          "type": "string",
          "x-nullable": true
        },
        "event_date": {
          "title": "Event date",
          "description": "Date of the event",
          "type": "string",
          "format": "date"
        },
        "event_time": {
          "title": "Event time",
          "description": "Start time of the event",
          "type": "string"
        },
        "end_time": {
          "title": "End time",
          "description": "End time of the event",
          "type": "string",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location of the event",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "access_code": {
          "title": "Access code",
          "description": "Unique access code for the event",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "max_guests": {
          "title": "Maximum guests",
          "description": "Maximum number of guests allowed (0 for unlimited)",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "guests_added": {
          "title": "Guests added",
          "description": "Number of guests added to the event",
          "type": "integer",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "description": "ID of the user who created this event",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "title": "Status",
          "description": "Current status of the event",
          "type": "string",
          "enum": [
            "DRAFT",
            "PUBLISHED",
            "CANCELLED",
            "COMPLETED"
          ]
        },
        "is_public": {
          "title": "Is public",
          "description": "Whether the event is public or private",
          "type": "boolean"
        },
        "requires_approval": {
          "title": "Requires approval",
          "description": "Whether guests require approval to attend",
          "type": "boolean"
        },
        "guests_count": {
          "title": "Guests count",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "EventCreate": {
      "required": [
        "title",
        "event_date",
        "event_time",
        "location"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Title of the event",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the event",
          "type": "string",
          "x-nullable": true
        },
        "event_date": {
          "title": "Event date",
          "description": "Date of the event",
          "type": "string",
          "format": "date"
        },
        "event_time": {
          "title": "Event time",
          "description": "Start time of the event",
          "type": "string"
        },
        "end_time": {
          "title": "End time",
          "description": "End time of the event",
          "type": "string",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location of the event",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "max_guests": {
          "title": "Maximum guests",
          "description": "Maximum number of guests allowed (0 for unlimited)",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "status": {
          "title": "Status",
          "description": "Current status of the event",
          "type": "string",
          "enum": [
            "DRAFT",
            "PUBLISHED",
            "CANCELLED",
            "COMPLETED"
          ]
        },
        "is_public": {
          "title": "Is public",
          "description": "Whether the event is public or private",
          "type": "boolean"
        },
        "requires_approval": {
          "title": "Requires approval",
          "description": "Whether guests require approval to attend",
          "type": "boolean"
        }
      }
    },
    "EventGuest": {
      "required": [
        "event",
        "name",
        "invited_by"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "event": {
          "title": "Event",
          "description": "The event this guest is invited to",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "title": "Guest name",
          "description": "Name of the guest",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Email address of the guest",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "phone": {
          "title": "Phone number",
          "description": "Phone number of the guest",
          "type": "string",
          "maxLength": 20,
          "x-nullable": true
        },
        "access_code": {
          "title": "Access code",
          "description": "Unique access code for the guest",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "invited_by": {
          "title": "Invited by",
          "description": "ID of the user who invited this guest",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "title": "Status",
          "description": "Current status of the guest",
          "type": "string",
          "enum": [
            "INVITED",
            "CONFIRMED",
            "DECLINED",
            "ATTENDED",
            "CANCELLED"
          ]
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the guest",
          "type": "string",
          "x-nullable": true
        },
        "check_in_time": {
          "title": "Check-in time",
          "description": "Time when the guest checked in",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "check_out_time": {
          "title": "Check-out time",
          "description": "Time when the guest checked out",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "EventGuestCreate": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Guest name",
          "description": "Name of the guest",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Email address of the guest",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "phone": {
          "title": "Phone number",
          "description": "Phone number of the guest",
          "type": "string",
          "maxLength": 20,
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the guest",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "EventGuestCheckIn": {
      "type": "object",
      "properties": {
        "notes": {
          "title": "Notes",
          "type": "string"
        }
      }
    },
    "EventGuestCheckOut": {
      "type": "object",
      "properties": {
        "notes": {
          "title": "Notes",
          "type": "string"
        }
      }
    },
    "EventUpdate": {
      "required": [
        "title",
        "event_date",
        "event_time",
        "location"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Title of the event",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the event",
          "type": "string",
          "x-nullable": true
        },
        "event_date": {
          "title": "Event date",
          "description": "Date of the event",
          "type": "string",
          "format": "date"
        },
        "event_time": {
          "title": "Event time",
          "description": "Start time of the event",
          "type": "string"
        },
        "end_time": {
          "title": "End time",
          "description": "End time of the event",
          "type": "string",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location of the event",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "max_guests": {
          "title": "Maximum guests",
          "description": "Maximum number of guests allowed (0 for unlimited)",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "status": {
          "title": "Status",
          "description": "Current status of the event",
          "type": "string",
          "enum": [
            "DRAFT",
            "PUBLISHED",
            "CANCELLED",
            "COMPLETED"
          ]
        },
        "is_public": {
          "title": "Is public",
          "description": "Whether the event is public or private",
          "type": "boolean"
        },
        "requires_approval": {
          "title": "Requires approval",
          "description": "Whether guests require approval to attend",
          "type": "boolean"
        }
      }
    },
    "BulkGuestCreate": {
      "required": [
        "guests"
      ],
      "type": "object",
      "properties": {
        "guests": {
          "description": "List of guests to add to the event",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "x-nullable": true
            }
          },
          "minItems": 1
        }
      }
    },
    "UserSummary": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "readOnly": true,
          "minLength": 1
        },
        "profile_image_url": {
          "title": "Profile image url",
          "description": "Profile image of the user.",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "IssueTicketList": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "issue_no": {
          "title": "Issue number",
          "description": "Unique issue number for tracking",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "title": {
          "title": "Title",
          "description": "Brief title describing the issue",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "issue_type": {
          "title": "Issue type",
          "description": "Type of issue being reported",
          "type": "string",
          "enum": [
            "CARPENTRY",
            "PLUMBING",
            "ELECTRICAL",
            "CLEANING",
            "SECURITY",
            "OTHER"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the issue",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "OPEN",
            "IN_PROGRESS",
            "PENDING",
            "RESOLVED",
            "CLOSED"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the issue",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "reported_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "assigned_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "comments_count": {
          "title": "Comments count",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected resolution date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "IssueTicketUpdate": {
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Brief title describing the issue",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the issue",
          "type": "string",
          "minLength": 1
        },
        "issue_type": {
          "title": "Issue type",
          "description": "Type of issue being reported",
          "type": "string",
          "enum": [
            "CARPENTRY",
            "PLUMBING",
            "ELECTRICAL",
            "CLEANING",
            "SECURITY",
            "OTHER"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the issue",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "OPEN",
            "IN_PROGRESS",
            "PENDING",
            "RESOLVED",
            "CLOSED"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the issue",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "assigned_to": {
          "title": "Assigned to",
          "description": "Staff member assigned to handle the issue",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "resolution_notes": {
          "title": "Resolution notes",
          "description": "Notes about how the issue was resolved",
          "type": "string"
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected resolution date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "IssueAttachment": {
      "required": [
        "file_name",
        "file_url",
        "file_size",
        "file_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "file_name": {
          "title": "File name",
          "description": "Original name of the uploaded file",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "file_url": {
          "title": "File URL",
          "description": "URL to access the uploaded file",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "file_size": {
          "title": "File size",
          "description": "Size of the file in bytes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "file_type": {
          "title": "File type",
          "description": "MIME type of the file",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "uploaded_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "IssueComment": {
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "content": {
          "title": "Content",
          "description": "Content of the comment",
          "type": "string",
          "minLength": 1
        },
        "author": {
          "$ref": "#/definitions/UserSummary"
        },
        "is_internal": {
          "title": "Is internal",
          "description": "Whether this comment is internal (staff only)",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent comment",
          "description": "Parent comment for threaded discussions",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueAttachment"
          },
          "readOnly": true
        },
        "replies": {
          "title": "Replies",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "IssueStatusHistory": {
      "required": [
        "to_status"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "from_status": {
          "title": "From status",
          "description": "Previous status",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "OPEN",
            "IN_PROGRESS",
            "PENDING",
            "RESOLVED",
            "CLOSED"
          ],
          "x-nullable": true
        },
        "to_status": {
          "title": "To status",
          "description": "New status",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "OPEN",
            "IN_PROGRESS",
            "PENDING",
            "RESOLVED",
            "CLOSED"
          ]
        },
        "changed_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "notes": {
          "title": "Notes",
          "description": "Notes about the status change",
          "type": "string"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "IssueTicketDetail": {
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "issue_no": {
          "title": "Issue number",
          "description": "Unique issue number for tracking",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "title": {
          "title": "Title",
          "description": "Brief title describing the issue",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the issue",
          "type": "string",
          "minLength": 1
        },
        "issue_type": {
          "title": "Issue type",
          "description": "Type of issue being reported",
          "type": "string",
          "enum": [
            "CARPENTRY",
            "PLUMBING",
            "ELECTRICAL",
            "CLEANING",
            "SECURITY",
            "OTHER"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the issue",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "OPEN",
            "IN_PROGRESS",
            "PENDING",
            "RESOLVED",
            "CLOSED"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the issue",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "reported_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "assigned_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueComment"
          },
          "readOnly": true
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueAttachment"
          },
          "readOnly": true
        },
        "status_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueStatusHistory"
          },
          "readOnly": true
        },
        "comments_count": {
          "title": "Comments count",
          "type": "string",
          "readOnly": true
        },
        "resolution_notes": {
          "title": "Resolution notes",
          "description": "Notes about how the issue was resolved",
          "type": "string"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "resolved_at": {
          "title": "Resolved at",
          "description": "Timestamp when the issue was resolved",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "closed_at": {
          "title": "Closed at",
          "description": "Timestamp when the issue was closed",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "escalated_at": {
          "title": "Escalated at",
          "description": "Timestamp when the issue was escalated",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected resolution date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "IssueAttachmentCreate": {
      "required": [
        "file_name",
        "file_url",
        "file_size",
        "file_type"
      ],
      "type": "object",
      "properties": {
        "file_name": {
          "title": "File name",
          "description": "Original name of the uploaded file",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "file_url": {
          "title": "File URL",
          "description": "URL to access the uploaded file",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "file_size": {
          "title": "File size",
          "description": "Size of the file in bytes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "file_type": {
          "title": "File type",
          "description": "MIME type of the file",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        }
      }
    },
    "IssueCommentCreate": {
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "content": {
          "title": "Content",
          "description": "Content of the comment",
          "type": "string",
          "minLength": 1
        },
        "is_internal": {
          "title": "Is internal",
          "description": "Whether this comment is internal (staff only)",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent comment",
          "description": "Parent comment for threaded discussions",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        }
      }
    },
    "Visitor": {
      "required": [
        "name",
        "phone",
        "estimated_arrival",
        "invited_by",
        "valid_date"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Visitor name",
          "description": "Full name of the visitor",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Email address of the visitor",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "phone": {
          "title": "Phone number",
          "description": "Phone number of the visitor",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "estimated_arrival": {
          "title": "Estimated arrival",
          "description": "Expected date and time of arrival",
          "type": "string",
          "format": "date-time"
        },
        "visit_type": {
          "title": "Visit type",
          "description": "Type of visit",
          "type": "string",
          "enum": [
            "ONE_TIME",
            "SHORT_STAY",
            "EXTENDED_STAY"
          ]
        },
        "access_code": {
          "title": "Access code",
          "description": "Unique access code for the visitor",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "invited_by": {
          "title": "Invited by",
          "description": "ID of the user who invited this visitor",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "title": "Status",
          "description": "Current status of the visitor",
          "type": "string",
          "enum": [
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CHECKED_IN",
            "CHECKED_OUT",
            "EXPIRED"
          ]
        },
        "valid_for": {
          "title": "Valid for",
          "description": "Validity type of the access code",
          "type": "string",
          "enum": [
            "ONE_TIME",
            "MULTIPLE"
          ]
        },
        "valid_date": {
          "title": "Valid date",
          "description": "Date until which the access code is valid",
          "type": "string",
          "format": "date"
        },
        "purpose": {
          "title": "Purpose of visit",
          "description": "Purpose or reason for the visit",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the visitor",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Invitation": {
      "required": [
        "visitor",
        "title",
        "start_date",
        "end_date"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "visitor": {
          "title": "Visitor",
          "description": "The visitor this invitation is for",
          "type": "string",
          "format": "uuid"
        },
        "visitor_details": {
          "$ref": "#/definitions/Visitor"
        },
        "title": {
          "title": "Title",
          "description": "Title or purpose of the invitation",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the invitation",
          "type": "string",
          "x-nullable": true
        },
        "start_date": {
          "title": "Start date",
          "description": "Date when the invitation becomes valid",
          "type": "string",
          "format": "date"
        },
        "end_date": {
          "title": "End date",
          "description": "Date when the invitation expires",
          "type": "string",
          "format": "date"
        },
        "recurrence_type": {
          "title": "Recurrence type",
          "description": "Type of recurrence for this invitation",
          "type": "string",
          "enum": [
            "NONE",
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "CUSTOM"
          ]
        },
        "recurrence_days": {
          "title": "Recurrence days",
          "description": "Days of the week for weekly recurrence (comma-separated numbers, 0=Monday)",
          "type": "string",
          "maxLength": 50,
          "x-nullable": true
        },
        "recurrence_day_of_month": {
          "title": "Recurrence day of month",
          "description": "Day of the month for monthly recurrence",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "status": {
          "title": "Status",
          "description": "Current status of the invitation",
          "type": "string",
          "enum": [
            "ACTIVE",
            "REVOKED",
            "EXPIRED",
            "COMPLETED"
          ]
        },
        "created_by": {
          "title": "Created by",
          "description": "ID of the user who created this invitation",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "revoked_by": {
          "title": "Revoked by",
          "description": "ID of the user who revoked this invitation",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "revoked_at": {
          "title": "Revoked at",
          "description": "Date and time when the invitation was revoked",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "revocation_reason": {
          "title": "Revocation reason",
          "description": "Reason for revoking the invitation",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "InvitationCreate": {
      "required": [
        "visitor",
        "title",
        "start_date",
        "end_date"
      ],
      "type": "object",
      "properties": {
        "visitor": {
          "title": "Visitor",
          "description": "The visitor this invitation is for",
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "title": "Title",
          "description": "Title or purpose of the invitation",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the invitation",
          "type": "string",
          "x-nullable": true
        },
        "start_date": {
          "title": "Start date",
          "description": "Date when the invitation becomes valid",
          "type": "string",
          "format": "date"
        },
        "end_date": {
          "title": "End date",
          "description": "Date when the invitation expires",
          "type": "string",
          "format": "date"
        },
        "recurrence_type": {
          "title": "Recurrence type",
          "description": "Type of recurrence for this invitation",
          "type": "string",
          "enum": [
            "NONE",
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "CUSTOM"
          ]
        },
        "recurrence_days": {
          "title": "Recurrence days",
          "description": "Days of the week for weekly recurrence (comma-separated numbers, 0=Monday)",
          "type": "string",
          "maxLength": 50,
          "x-nullable": true
        },
        "recurrence_day_of_month": {
          "title": "Recurrence day of month",
          "description": "Day of the month for monthly recurrence",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        }
      }
    },
    "InvitationUpdate": {
      "required": [
        "title",
        "start_date",
        "end_date"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Title or purpose of the invitation",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the invitation",
          "type": "string",
          "x-nullable": true
        },
        "start_date": {
          "title": "Start date",
          "description": "Date when the invitation becomes valid",
          "type": "string",
          "format": "date"
        },
        "end_date": {
          "title": "End date",
          "description": "Date when the invitation expires",
          "type": "string",
          "format": "date"
        },
        "recurrence_type": {
          "title": "Recurrence type",
          "description": "Type of recurrence for this invitation",
          "type": "string",
          "enum": [
            "NONE",
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "CUSTOM"
          ]
        },
        "recurrence_days": {
          "title": "Recurrence days",
          "description": "Days of the week for weekly recurrence (comma-separated numbers, 0=Monday)",
          "type": "string",
          "maxLength": 50,
          "x-nullable": true
        },
        "recurrence_day_of_month": {
          "title": "Recurrence day of month",
          "description": "Day of the month for monthly recurrence",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "status": {
          "title": "Status",
          "description": "Current status of the invitation",
          "type": "string",
          "enum": [
            "ACTIVE",
            "REVOKED",
            "EXPIRED",
            "COMPLETED"
          ]
        }
      }
    },
    "InvitationRevoke": {
      "type": "object",
      "properties": {
        "revocation_reason": {
          "title": "Revocation reason",
          "description": "Reason for revoking the invitation",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "MaintenanceLog": {
      "required": [
        "title",
        "description",
        "property_location"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "maintenance_number": {
          "title": "Maintenance number",
          "description": "Unique maintenance number for tracking",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "title": {
          "title": "Maintenance title",
          "description": "Brief title describing the maintenance activity",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the maintenance work performed",
          "type": "string",
          "minLength": 1
        },
        "maintenance_type": {
          "title": "Maintenance type",
          "description": "Type of maintenance activity",
          "type": "string",
          "enum": [
            "PREVENTIVE",
            "CORRECTIVE",
            "EMERGENCY",
            "ROUTINE",
            "INSPECTION",
            "UPGRADE",
            "OTHER"
          ]
        },
        "maintenance_type_display": {
          "title": "Maintenance type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "property_type": {
          "title": "Property type",
          "description": "Type of property or equipment maintained",
          "type": "string",
          "enum": [
            "BUILDING",
            "ELECTRICAL",
            "PLUMBING",
            "HVAC",
            "SECURITY",
            "LANDSCAPING",
            "EQUIPMENT",
            "INFRASTRUCTURE",
            "OTHER"
          ]
        },
        "property_type_display": {
          "title": "Property type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "property_location": {
          "title": "Property location",
          "description": "Specific location of the property or equipment",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "equipment_name": {
          "title": "Equipment name",
          "description": "Name or model of the equipment (if applicable)",
          "type": "string",
          "maxLength": 200
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the maintenance",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "priority_display": {
          "title": "Priority display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "description": "Current status of the maintenance",
          "type": "string",
          "enum": [
            "SCHEDULED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "POSTPONED"
          ]
        },
        "status_display": {
          "title": "Status display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "performed_by": {
          "$ref": "#/definitions/Account"
        },
        "supervised_by": {
          "$ref": "#/definitions/Account"
        },
        "requested_by": {
          "$ref": "#/definitions/Account"
        },
        "scheduled_date": {
          "title": "Scheduled date",
          "description": "Scheduled date and time for the maintenance",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "started_at": {
          "title": "Started at",
          "description": "Timestamp when maintenance was started",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "completed_at": {
          "title": "Completed at",
          "description": "Timestamp when maintenance was completed",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "estimated_duration": {
          "title": "Estimated duration",
          "description": "Estimated time to complete the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "actual_duration": {
          "title": "Actual duration",
          "description": "Actual time spent on the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "cost": {
          "title": "Cost",
          "description": "Total cost of the maintenance",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "materials_used": {
          "title": "Materials used",
          "description": "List of materials and parts used",
          "type": "string"
        },
        "tools_used": {
          "title": "Tools used",
          "description": "List of tools and equipment used",
          "type": "string"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the maintenance",
          "type": "string"
        },
        "completion_notes": {
          "title": "Completion notes",
          "description": "Notes about maintenance completion and results",
          "type": "string"
        },
        "next_maintenance_due": {
          "title": "Next maintenance due",
          "description": "When the next maintenance is due for this item",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "warranty_expiry": {
          "title": "Warranty expiry",
          "description": "Warranty expiry date for the equipment",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "is_under_warranty": {
          "title": "Is under warranty",
          "description": "Whether the equipment is still under warranty",
          "type": "boolean"
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "string",
          "readOnly": true
        },
        "is_due_soon": {
          "title": "Is due soon",
          "type": "string",
          "readOnly": true
        },
        "time_remaining": {
          "title": "Time remaining",
          "type": "string",
          "readOnly": true
        },
        "duration_worked": {
          "title": "Duration worked",
          "type": "string",
          "readOnly": true
        },
        "attachments_count": {
          "title": "Attachments count",
          "type": "string",
          "readOnly": true
        },
        "comments_count": {
          "title": "Comments count",
          "type": "string",
          "readOnly": true
        },
        "total_cost": {
          "title": "Total cost",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MaintenanceLogCreate": {
      "required": [
        "title",
        "description",
        "property_location"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Maintenance title",
          "description": "Brief title describing the maintenance activity",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the maintenance work performed",
          "type": "string",
          "minLength": 1
        },
        "maintenance_type": {
          "title": "Maintenance type",
          "description": "Type of maintenance activity",
          "type": "string",
          "enum": [
            "PREVENTIVE",
            "CORRECTIVE",
            "EMERGENCY",
            "ROUTINE",
            "INSPECTION",
            "UPGRADE",
            "OTHER"
          ]
        },
        "property_type": {
          "title": "Property type",
          "description": "Type of property or equipment maintained",
          "type": "string",
          "enum": [
            "BUILDING",
            "ELECTRICAL",
            "PLUMBING",
            "HVAC",
            "SECURITY",
            "LANDSCAPING",
            "EQUIPMENT",
            "INFRASTRUCTURE",
            "OTHER"
          ]
        },
        "property_location": {
          "title": "Property location",
          "description": "Specific location of the property or equipment",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "equipment_name": {
          "title": "Equipment name",
          "description": "Name or model of the equipment (if applicable)",
          "type": "string",
          "maxLength": 200
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the maintenance",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "scheduled_date": {
          "title": "Scheduled date",
          "description": "Scheduled date and time for the maintenance",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "estimated_duration": {
          "title": "Estimated duration",
          "description": "Estimated time to complete the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "cost": {
          "title": "Cost",
          "description": "Total cost of the maintenance",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "materials_used": {
          "title": "Materials used",
          "description": "List of materials and parts used",
          "type": "string"
        },
        "tools_used": {
          "title": "Tools used",
          "description": "List of tools and equipment used",
          "type": "string"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the maintenance",
          "type": "string"
        },
        "next_maintenance_due": {
          "title": "Next maintenance due",
          "description": "When the next maintenance is due for this item",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "warranty_expiry": {
          "title": "Warranty expiry",
          "description": "Warranty expiry date for the equipment",
          "type": "string",
          "format": "date",
          "x-nullable": true
        }
      }
    },
    "MaintenanceLogUpdate": {
      "required": [
        "title",
        "description",
        "property_location"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Maintenance title",
          "description": "Brief title describing the maintenance activity",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the maintenance work performed",
          "type": "string",
          "minLength": 1
        },
        "maintenance_type": {
          "title": "Maintenance type",
          "description": "Type of maintenance activity",
          "type": "string",
          "enum": [
            "PREVENTIVE",
            "CORRECTIVE",
            "EMERGENCY",
            "ROUTINE",
            "INSPECTION",
            "UPGRADE",
            "OTHER"
          ]
        },
        "property_type": {
          "title": "Property type",
          "description": "Type of property or equipment maintained",
          "type": "string",
          "enum": [
            "BUILDING",
            "ELECTRICAL",
            "PLUMBING",
            "HVAC",
            "SECURITY",
            "LANDSCAPING",
            "EQUIPMENT",
            "INFRASTRUCTURE",
            "OTHER"
          ]
        },
        "property_location": {
          "title": "Property location",
          "description": "Specific location of the property or equipment",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "equipment_name": {
          "title": "Equipment name",
          "description": "Name or model of the equipment (if applicable)",
          "type": "string",
          "maxLength": 200
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the maintenance",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the maintenance",
          "type": "string",
          "enum": [
            "SCHEDULED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "POSTPONED"
          ]
        },
        "scheduled_date": {
          "title": "Scheduled date",
          "description": "Scheduled date and time for the maintenance",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "estimated_duration": {
          "title": "Estimated duration",
          "description": "Estimated time to complete the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "actual_duration": {
          "title": "Actual duration",
          "description": "Actual time spent on the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "cost": {
          "title": "Cost",
          "description": "Total cost of the maintenance",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "materials_used": {
          "title": "Materials used",
          "description": "List of materials and parts used",
          "type": "string"
        },
        "tools_used": {
          "title": "Tools used",
          "description": "List of tools and equipment used",
          "type": "string"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the maintenance",
          "type": "string"
        },
        "completion_notes": {
          "title": "Completion notes",
          "description": "Notes about maintenance completion and results",
          "type": "string"
        },
        "next_maintenance_due": {
          "title": "Next maintenance due",
          "description": "When the next maintenance is due for this item",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "warranty_expiry": {
          "title": "Warranty expiry",
          "description": "Warranty expiry date for the equipment",
          "type": "string",
          "format": "date",
          "x-nullable": true
        }
      }
    },
    "MaintenanceSchedule": {
      "required": [
        "name",
        "description",
        "property_type",
        "property_location",
        "next_due_date"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Schedule name",
          "description": "Name of the maintenance schedule",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Description of the scheduled maintenance",
          "type": "string",
          "minLength": 1
        },
        "property_type": {
          "title": "Property type",
          "description": "Type of property or equipment",
          "type": "string",
          "enum": [
            "BUILDING",
            "ELECTRICAL",
            "PLUMBING",
            "HVAC",
            "SECURITY",
            "LANDSCAPING",
            "EQUIPMENT",
            "INFRASTRUCTURE",
            "OTHER"
          ]
        },
        "property_type_display": {
          "title": "Property type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "property_location": {
          "title": "Property location",
          "description": "Specific location of the property or equipment",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "equipment_name": {
          "title": "Equipment name",
          "description": "Name or model of the equipment (if applicable)",
          "type": "string",
          "maxLength": 200
        },
        "frequency_type": {
          "title": "Frequency type",
          "description": "How often the maintenance should be performed",
          "type": "string",
          "enum": [
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUAL",
            "ANNUAL",
            "CUSTOM"
          ]
        },
        "frequency_type_display": {
          "title": "Frequency type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "frequency_value": {
          "title": "Frequency value",
          "description": "Numeric value for custom frequency (e.g., every 3 months)",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "next_due_date": {
          "title": "Next due date",
          "description": "When the next maintenance is due",
          "type": "string",
          "format": "date-time"
        },
        "estimated_duration": {
          "title": "Estimated duration",
          "description": "Estimated time to complete the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "estimated_cost": {
          "title": "Estimated cost",
          "description": "Estimated cost of the maintenance",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "assigned_to": {
          "$ref": "#/definitions/Account"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether this schedule is active",
          "type": "boolean"
        },
        "instructions": {
          "title": "Instructions",
          "description": "Instructions for performing the maintenance",
          "type": "string"
        },
        "materials_needed": {
          "title": "Materials needed",
          "description": "List of materials typically needed",
          "type": "string"
        },
        "tools_needed": {
          "title": "Tools needed",
          "description": "List of tools typically needed",
          "type": "string"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MaintenanceScheduleCreate": {
      "required": [
        "name",
        "description",
        "property_type",
        "property_location",
        "next_due_date"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Schedule name",
          "description": "Name of the maintenance schedule",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Description of the scheduled maintenance",
          "type": "string",
          "minLength": 1
        },
        "property_type": {
          "title": "Property type",
          "description": "Type of property or equipment",
          "type": "string",
          "enum": [
            "BUILDING",
            "ELECTRICAL",
            "PLUMBING",
            "HVAC",
            "SECURITY",
            "LANDSCAPING",
            "EQUIPMENT",
            "INFRASTRUCTURE",
            "OTHER"
          ]
        },
        "property_location": {
          "title": "Property location",
          "description": "Specific location of the property or equipment",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "equipment_name": {
          "title": "Equipment name",
          "description": "Name or model of the equipment (if applicable)",
          "type": "string",
          "maxLength": 200
        },
        "frequency_type": {
          "title": "Frequency type",
          "description": "How often the maintenance should be performed",
          "type": "string",
          "enum": [
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUAL",
            "ANNUAL",
            "CUSTOM"
          ]
        },
        "frequency_value": {
          "title": "Frequency value",
          "description": "Numeric value for custom frequency (e.g., every 3 months)",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "next_due_date": {
          "title": "Next due date",
          "description": "When the next maintenance is due",
          "type": "string",
          "format": "date-time"
        },
        "estimated_duration": {
          "title": "Estimated duration",
          "description": "Estimated time to complete the maintenance",
          "type": "string",
          "x-nullable": true
        },
        "estimated_cost": {
          "title": "Estimated cost",
          "description": "Estimated cost of the maintenance",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "instructions": {
          "title": "Instructions",
          "description": "Instructions for performing the maintenance",
          "type": "string"
        },
        "materials_needed": {
          "title": "Materials needed",
          "description": "List of materials typically needed",
          "type": "string"
        },
        "tools_needed": {
          "title": "Tools needed",
          "description": "List of tools typically needed",
          "type": "string"
        }
      }
    },
    "Role": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "owner": {
          "title": "Owner",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "description": "Description of the role.",
          "type": "string"
        },
        "total_subusers": {
          "title": "Total subusers",
          "type": "integer",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "StaffSummary": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "readOnly": true,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "ShiftAttendance": {
      "type": "object",
      "properties": {
        "clock_in_time": {
          "title": "Clock in time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "clock_out_time": {
          "title": "Clock out time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "break_start_time": {
          "title": "Break start time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "break_end_time": {
          "title": "Break end time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "total_break_duration": {
          "title": "Total break duration",
          "description": "Total time spent on breaks",
          "type": "string"
        },
        "overtime_hours": {
          "title": "Overtime hours",
          "description": "Hours worked beyond scheduled time",
          "type": "string",
          "readOnly": true
        },
        "overtime_hours_decimal": {
          "title": "Overtime hours decimal",
          "type": "string",
          "readOnly": true
        },
        "late_arrival_minutes": {
          "title": "Late arrival minutes",
          "description": "Minutes late for shift start",
          "type": "integer",
          "readOnly": true
        },
        "early_departure_minutes": {
          "title": "Early departure minutes",
          "description": "Minutes left before shift end",
          "type": "integer",
          "readOnly": true
        },
        "actual_work_duration_hours": {
          "title": "Actual work duration hours",
          "type": "string",
          "readOnly": true
        },
        "attendance_notes": {
          "title": "Attendance notes",
          "description": "Notes about attendance issues or special circumstances",
          "type": "string"
        }
      }
    },
    "Shift": {
      "required": [
        "title",
        "assigned_staff",
        "start_time",
        "end_time"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "title": {
          "title": "Shift title",
          "description": "Title or description of the shift",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "shift_type": {
          "title": "Shift type",
          "description": "Type of work shift",
          "type": "string",
          "enum": [
            "SECURITY",
            "MAINTENANCE",
            "CLEANING",
            "RECEPTION",
            "GARDENING",
            "OTHER"
          ]
        },
        "shift_type_display": {
          "title": "Shift type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "assigned_staff": {
          "title": "Assigned staff",
          "description": "Staff member assigned to this shift",
          "type": "string",
          "format": "uuid"
        },
        "assigned_staff_details": {
          "$ref": "#/definitions/StaffSummary"
        },
        "start_time": {
          "title": "Start time",
          "description": "Scheduled start time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "title": "End time",
          "description": "Scheduled end time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "actual_start_time": {
          "title": "Actual start time",
          "description": "Actual time the staff clocked in",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "actual_end_time": {
          "title": "Actual end time",
          "description": "Actual time the staff clocked out",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "status": {
          "title": "Status",
          "description": "Current status of the shift",
          "type": "string",
          "enum": [
            "SCHEDULED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "NO_SHOW"
          ],
          "readOnly": true
        },
        "status_display": {
          "title": "Status display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "location": {
          "title": "Location",
          "description": "Location where the shift takes place",
          "type": "string",
          "maxLength": 200
        },
        "responsibilities": {
          "title": "Responsibilities",
          "description": "Description of responsibilities for this shift",
          "type": "string"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the shift",
          "type": "string"
        },
        "is_recurring": {
          "title": "Is recurring",
          "description": "Whether this shift repeats",
          "type": "boolean"
        },
        "recurrence_pattern": {
          "title": "Recurrence pattern",
          "description": "Pattern for recurring shifts (daily, weekly, monthly)",
          "type": "string",
          "maxLength": 50
        },
        "duration_hours": {
          "title": "Duration hours",
          "type": "string",
          "readOnly": true
        },
        "actual_duration_hours": {
          "title": "Actual duration hours",
          "type": "string",
          "readOnly": true
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "string",
          "readOnly": true
        },
        "is_upcoming": {
          "title": "Is upcoming",
          "type": "string",
          "readOnly": true
        },
        "attendance": {
          "$ref": "#/definitions/ShiftAttendance"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ShiftSwapRequest": {
      "required": [
        "original_shift",
        "requested_by",
        "requested_with",
        "reason"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "original_shift": {
          "title": "Original shift",
          "type": "string",
          "format": "uuid"
        },
        "original_shift_details": {
          "$ref": "#/definitions/Shift"
        },
        "requested_by": {
          "title": "Requested by",
          "type": "string",
          "format": "uuid"
        },
        "requested_by_details": {
          "$ref": "#/definitions/StaffSummary"
        },
        "requested_with": {
          "title": "Requested with",
          "type": "string",
          "format": "uuid"
        },
        "requested_with_details": {
          "$ref": "#/definitions/StaffSummary"
        },
        "target_shift": {
          "title": "Target shift",
          "description": "The shift to swap with (optional for coverage requests)",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "target_shift_details": {
          "$ref": "#/definitions/Shift"
        },
        "reason": {
          "title": "Reason",
          "description": "Reason for the swap request",
          "type": "string",
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "readOnly": true
        },
        "status_display": {
          "title": "Status display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "approved_by": {
          "title": "Approved by",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "approved_by_details": {
          "$ref": "#/definitions/StaffSummary"
        },
        "approved_at": {
          "title": "Approved at",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "response_message": {
          "title": "Response message",
          "description": "Response message from the other staff member or admin",
          "type": "string"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ShiftSwapRequestCreate": {
      "required": [
        "original_shift",
        "requested_with",
        "reason"
      ],
      "type": "object",
      "properties": {
        "original_shift": {
          "title": "Original shift",
          "type": "string",
          "format": "uuid"
        },
        "requested_with": {
          "title": "Requested with",
          "type": "string",
          "format": "uuid"
        },
        "target_shift": {
          "title": "Target shift",
          "description": "The shift to swap with (optional for coverage requests)",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "reason": {
          "title": "Reason",
          "description": "Reason for the swap request",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ShiftList": {
      "required": [
        "title",
        "start_time",
        "end_time"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "title": "Shift title",
          "description": "Title or description of the shift",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "shift_type": {
          "title": "Shift type",
          "description": "Type of work shift",
          "type": "string",
          "enum": [
            "SECURITY",
            "MAINTENANCE",
            "CLEANING",
            "RECEPTION",
            "GARDENING",
            "OTHER"
          ]
        },
        "shift_type_display": {
          "title": "Shift type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "assigned_staff_name": {
          "title": "Assigned staff name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "start_time": {
          "title": "Start time",
          "description": "Scheduled start time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "title": "End time",
          "description": "Scheduled end time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "title": "Status",
          "description": "Current status of the shift",
          "type": "string",
          "enum": [
            "SCHEDULED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "NO_SHOW"
          ]
        },
        "status_display": {
          "title": "Status display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "location": {
          "title": "Location",
          "description": "Location where the shift takes place",
          "type": "string",
          "maxLength": 200
        },
        "duration_hours": {
          "title": "Duration hours",
          "type": "string",
          "readOnly": true
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "string",
          "readOnly": true
        },
        "is_upcoming": {
          "title": "Is upcoming",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ShiftCreate": {
      "required": [
        "title",
        "assigned_staff",
        "start_time",
        "end_time"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Shift title",
          "description": "Title or description of the shift",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "shift_type": {
          "title": "Shift type",
          "description": "Type of work shift",
          "type": "string",
          "enum": [
            "SECURITY",
            "MAINTENANCE",
            "CLEANING",
            "RECEPTION",
            "GARDENING",
            "OTHER"
          ]
        },
        "assigned_staff": {
          "title": "Assigned staff",
          "description": "Staff member assigned to this shift",
          "type": "string",
          "format": "uuid"
        },
        "start_time": {
          "title": "Start time",
          "description": "Scheduled start time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "title": "End time",
          "description": "Scheduled end time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "title": "Location",
          "description": "Location where the shift takes place",
          "type": "string",
          "maxLength": 200
        },
        "responsibilities": {
          "title": "Responsibilities",
          "description": "Description of responsibilities for this shift",
          "type": "string"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the shift",
          "type": "string"
        },
        "is_recurring": {
          "title": "Is recurring",
          "description": "Whether this shift repeats",
          "type": "boolean"
        },
        "recurrence_pattern": {
          "title": "Recurrence pattern",
          "description": "Pattern for recurring shifts (daily, weekly, monthly)",
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "ShiftUpdate": {
      "required": [
        "title",
        "assigned_staff",
        "start_time",
        "end_time"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Shift title",
          "description": "Title or description of the shift",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "shift_type": {
          "title": "Shift type",
          "description": "Type of work shift",
          "type": "string",
          "enum": [
            "SECURITY",
            "MAINTENANCE",
            "CLEANING",
            "RECEPTION",
            "GARDENING",
            "OTHER"
          ]
        },
        "assigned_staff": {
          "title": "Assigned staff",
          "description": "Staff member assigned to this shift",
          "type": "string",
          "format": "uuid"
        },
        "start_time": {
          "title": "Start time",
          "description": "Scheduled start time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "title": "End time",
          "description": "Scheduled end time of the shift",
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "title": "Location",
          "description": "Location where the shift takes place",
          "type": "string",
          "maxLength": 200
        },
        "responsibilities": {
          "title": "Responsibilities",
          "description": "Description of responsibilities for this shift",
          "type": "string"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the shift",
          "type": "string"
        },
        "is_recurring": {
          "title": "Is recurring",
          "description": "Whether this shift repeats",
          "type": "boolean"
        },
        "recurrence_pattern": {
          "title": "Recurrence pattern",
          "description": "Pattern for recurring shifts (daily, weekly, monthly)",
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "SOSAlert": {
      "required": [
        "user",
        "emergency_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "alert_id": {
          "title": "Alert ID",
          "description": "Unique identifier for the alert",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user": {
          "title": "User",
          "description": "User who triggered the alert",
          "type": "string",
          "format": "uuid"
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "emergency_type": {
          "title": "Emergency type",
          "description": "Type of emergency",
          "type": "string",
          "enum": [
            "health",
            "theft",
            "domestic_violence",
            "fire",
            "security",
            "accident",
            "other"
          ]
        },
        "emergency_type_display": {
          "title": "Emergency type display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Optional description of the emergency",
          "type": "string"
        },
        "location": {
          "title": "Location",
          "description": "Location of the emergency",
          "type": "string",
          "maxLength": 200
        },
        "status": {
          "title": "Status",
          "description": "Current status of the alert",
          "type": "string",
          "enum": [
            "active",
            "acknowledged",
            "responding",
            "resolved",
            "cancelled",
            "false_alarm"
          ]
        },
        "status_display": {
          "title": "Status display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the alert",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "priority_display": {
          "title": "Priority display",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "acknowledged_at": {
          "title": "Acknowledged at",
          "description": "When the alert was acknowledged",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "acknowledged_by": {
          "title": "Acknowledged by",
          "description": "User who acknowledged the alert",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "acknowledged_by_name": {
          "title": "Acknowledged by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "responded_at": {
          "title": "Responded at",
          "description": "When response began",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "responded_by": {
          "title": "Responded by",
          "description": "User who responded to the alert",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "responded_by_name": {
          "title": "Responded by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "resolved_at": {
          "title": "Resolved at",
          "description": "When the alert was resolved",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "resolved_by": {
          "title": "Resolved by",
          "description": "User who resolved the alert",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "resolved_by_name": {
          "title": "Resolved by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "resolution_notes": {
          "title": "Resolution notes",
          "description": "Notes about the resolution",
          "type": "string"
        },
        "cancelled_at": {
          "title": "Cancelled at",
          "description": "When the alert was cancelled",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "cancelled_by": {
          "title": "Cancelled by",
          "description": "User who cancelled the alert",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "cancelled_by_name": {
          "title": "Cancelled by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "cancellation_reason": {
          "title": "Cancellation reason",
          "description": "Reason for cancellation",
          "type": "string"
        },
        "response_time_minutes": {
          "title": "Response time minutes",
          "type": "string",
          "readOnly": true
        },
        "resolution_time_minutes": {
          "title": "Resolution time minutes",
          "type": "string",
          "readOnly": true
        },
        "is_active": {
          "title": "Is active",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SOSAlertCreate": {
      "required": [
        "emergency_type"
      ],
      "type": "object",
      "properties": {
        "emergency_type": {
          "title": "Emergency type",
          "description": "Type of emergency",
          "type": "string",
          "enum": [
            "health",
            "theft",
            "domestic_violence",
            "fire",
            "security",
            "accident",
            "other"
          ]
        },
        "description": {
          "title": "Description",
          "description": "Optional description of the emergency",
          "type": "string"
        },
        "location": {
          "title": "Location",
          "description": "Location of the emergency",
          "type": "string",
          "maxLength": 200
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the alert",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high",
            "critical"
          ]
        }
      }
    },
    "SOSAlertUpdate": {
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "description": "Optional description of the emergency",
          "type": "string"
        },
        "location": {
          "title": "Location",
          "description": "Location of the emergency",
          "type": "string",
          "maxLength": 200
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the alert",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "resolution_notes": {
          "title": "Resolution notes",
          "description": "Notes about the resolution",
          "type": "string"
        },
        "cancellation_reason": {
          "title": "Cancellation reason",
          "description": "Reason for cancellation",
          "type": "string"
        }
      }
    },
    "TaskComment": {
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "content": {
          "title": "Content",
          "description": "Content of the comment",
          "type": "string",
          "minLength": 1
        },
        "author": {
          "$ref": "#/definitions/UserSummary"
        },
        "is_internal": {
          "title": "Is internal",
          "description": "Whether this comment is internal (staff only)",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent comment",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "replies": {
          "title": "Replies",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "TaskCommentCreate": {
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "content": {
          "title": "Content",
          "description": "Content of the comment",
          "type": "string",
          "minLength": 1
        },
        "is_internal": {
          "title": "Is internal",
          "description": "Whether this comment is internal (staff only)",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent comment",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        }
      }
    },
    "TaskList": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "task_number": {
          "title": "Task number",
          "description": "Unique task number for tracking",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "title": {
          "title": "Task title",
          "description": "Brief title describing the task",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "task_type": {
          "title": "Task type",
          "description": "Type of task",
          "type": "string",
          "enum": [
            "MAINTENANCE",
            "SECURITY",
            "CLEANING",
            "ADMINISTRATIVE",
            "INSPECTION",
            "REPAIR",
            "OTHER"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the task",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the task",
          "type": "string",
          "enum": [
            "PENDING",
            "ASSIGNED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "OVERDUE"
          ]
        },
        "assigned_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "created_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected completion date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location where the task should be performed",
          "type": "string",
          "maxLength": 200
        },
        "estimated_hours": {
          "title": "Estimated hours",
          "description": "Estimated time to complete the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "actual_hours": {
          "title": "Actual hours",
          "description": "Actual time spent on the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "escalated_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "escalated_at": {
          "title": "Escalated at",
          "description": "Timestamp when task was escalated",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "started_at": {
          "title": "Started at",
          "description": "Timestamp when task was started",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "completed_at": {
          "title": "Completed at",
          "description": "Timestamp when task was completed",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "string",
          "readOnly": true
        },
        "is_due_soon": {
          "title": "Is due soon",
          "type": "string",
          "readOnly": true
        },
        "time_remaining": {
          "title": "Time remaining",
          "type": "string",
          "readOnly": true
        },
        "duration_worked": {
          "title": "Duration worked",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TaskCreate": {
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Task title",
          "description": "Brief title describing the task",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the task",
          "type": "string",
          "minLength": 1
        },
        "task_type": {
          "title": "Task type",
          "description": "Type of task",
          "type": "string",
          "enum": [
            "MAINTENANCE",
            "SECURITY",
            "CLEANING",
            "ADMINISTRATIVE",
            "INSPECTION",
            "REPAIR",
            "OTHER"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the task",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "assigned_to_id": {
          "title": "Assigned to id",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected completion date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "estimated_hours": {
          "title": "Estimated hours",
          "description": "Estimated time to complete the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location where the task should be performed",
          "type": "string",
          "maxLength": 200
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the task",
          "type": "string"
        }
      }
    },
    "TaskAttachment": {
      "required": [
        "file_name",
        "file_url",
        "file_size",
        "file_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "file_name": {
          "title": "File name",
          "description": "Original name of the uploaded file",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "file_url": {
          "title": "File URL",
          "description": "URL to access the uploaded file",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "file_size": {
          "title": "File size",
          "description": "Size of the file in bytes",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "file_type": {
          "title": "File type",
          "description": "MIME type of the file",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "attachment_type": {
          "title": "Attachment type",
          "description": "Type of attachment",
          "type": "string",
          "enum": [
            "INSTRUCTION",
            "REFERENCE",
            "EVIDENCE",
            "COMPLETION",
            "OTHER"
          ]
        },
        "uploaded_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "TaskStatusHistory": {
      "required": [
        "to_status"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "from_status": {
          "title": "From status",
          "description": "Previous status",
          "type": "string",
          "enum": [
            "PENDING",
            "ASSIGNED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "OVERDUE"
          ],
          "x-nullable": true
        },
        "to_status": {
          "title": "To status",
          "description": "New status",
          "type": "string",
          "enum": [
            "PENDING",
            "ASSIGNED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "OVERDUE"
          ]
        },
        "changed_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "notes": {
          "title": "Notes",
          "description": "Notes about the status change",
          "type": "string"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "TaskEscalationHistory": {
      "required": [
        "reason"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "escalated_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "escalated_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "reason": {
          "title": "Escalation reason",
          "description": "Reason for escalation",
          "type": "string",
          "minLength": 1
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "TaskDetail": {
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "task_number": {
          "title": "Task number",
          "description": "Unique task number for tracking",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "title": {
          "title": "Task title",
          "description": "Brief title describing the task",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the task",
          "type": "string",
          "minLength": 1
        },
        "task_type": {
          "title": "Task type",
          "description": "Type of task",
          "type": "string",
          "enum": [
            "MAINTENANCE",
            "SECURITY",
            "CLEANING",
            "ADMINISTRATIVE",
            "INSPECTION",
            "REPAIR",
            "OTHER"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the task",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the task",
          "type": "string",
          "enum": [
            "PENDING",
            "ASSIGNED",
            "IN_PROGRESS",
            "COMPLETED",
            "CANCELLED",
            "OVERDUE"
          ]
        },
        "assigned_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "created_by": {
          "$ref": "#/definitions/UserSummary"
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected completion date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "started_at": {
          "title": "Started at",
          "description": "Timestamp when task was started",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "completed_at": {
          "title": "Completed at",
          "description": "Timestamp when task was completed",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "estimated_hours": {
          "title": "Estimated hours",
          "description": "Estimated time to complete the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "actual_hours": {
          "title": "Actual hours",
          "description": "Actual time spent on the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location where the task should be performed",
          "type": "string",
          "maxLength": 200
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the task",
          "type": "string"
        },
        "completion_notes": {
          "title": "Completion notes",
          "description": "Notes about task completion",
          "type": "string"
        },
        "escalated_at": {
          "title": "Escalated at",
          "description": "Timestamp when task was escalated",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "escalated_to": {
          "$ref": "#/definitions/UserSummary"
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAttachment"
          },
          "readOnly": true
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskComment"
          },
          "readOnly": true
        },
        "status_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskStatusHistory"
          },
          "readOnly": true
        },
        "escalation_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskEscalationHistory"
          },
          "readOnly": true
        },
        "assignment_history": {
          "title": "Assignment history",
          "type": "string",
          "readOnly": true
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "string",
          "readOnly": true
        },
        "is_due_soon": {
          "title": "Is due soon",
          "type": "string",
          "readOnly": true
        },
        "time_remaining": {
          "title": "Time remaining",
          "type": "string",
          "readOnly": true
        },
        "duration_worked": {
          "title": "Duration worked",
          "type": "string",
          "readOnly": true
        },
        "comments_count": {
          "title": "Comments count",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TaskUpdate": {
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Task title",
          "description": "Brief title describing the task",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the task",
          "type": "string",
          "minLength": 1
        },
        "task_type": {
          "title": "Task type",
          "description": "Type of task",
          "type": "string",
          "enum": [
            "MAINTENANCE",
            "SECURITY",
            "CLEANING",
            "ADMINISTRATIVE",
            "INSPECTION",
            "REPAIR",
            "OTHER"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the task",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        },
        "assigned_to_id": {
          "title": "Assigned to id",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "due_date": {
          "title": "Due date",
          "description": "Expected completion date",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "estimated_hours": {
          "title": "Estimated hours",
          "description": "Estimated time to complete the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "actual_hours": {
          "title": "Actual hours",
          "description": "Actual time spent on the task in hours",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "location": {
          "title": "Location",
          "description": "Location where the task should be performed",
          "type": "string",
          "maxLength": 200
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the task",
          "type": "string"
        }
      }
    },
    "Bill": {
      "required": [
        "title",
        "type",
        "amount",
        "due_date"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bill_number": {
          "title": "Bill number",
          "description": "Unique bill number",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_id": {
          "title": "User id",
          "description": "The ID of the user this bill is for (null for cluster-wide bills)",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "title": {
          "title": "Title",
          "description": "Bill title",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Bill description",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "title": "Type",
          "description": "Type of bill",
          "type": "string",
          "enum": [
            "electricity",
            "water",
            "security",
            "maintenance",
            "service_charge",
            "waste_management",
            "electricity_utility",
            "water_utility",
            "internet_utility",
            "cable_tv_utility",
            "other"
          ]
        },
        "category": {
          "title": "Category",
          "description": "Bill category (cluster-managed or user-managed)",
          "type": "string",
          "enum": [
            "cluster_managed",
            "user_managed"
          ]
        },
        "amount": {
          "title": "Amount",
          "description": "Bill amount",
          "type": "string",
          "format": "decimal"
        },
        "currency": {
          "title": "Currency",
          "description": "Currency code",
          "type": "string",
          "maxLength": 3,
          "minLength": 1
        },
        "acknowledged_by": {
          "description": "Users who have acknowledged this bill",
          "type": "array",
          "items": {
            "description": "Users who have acknowledged this bill",
            "type": "string",
            "format": "uuid"
          },
          "readOnly": true,
          "uniqueItems": true
        },
        "acknowledgment_count": {
          "title": "Acknowledgment count",
          "type": "integer",
          "readOnly": true
        },
        "allow_payment_after_due": {
          "title": "Allow payment after due",
          "description": "Whether payment is allowed after due date",
          "type": "boolean"
        },
        "is_disputed": {
          "title": "Is disputed",
          "type": "string",
          "readOnly": true
        },
        "dispute_count": {
          "title": "Dispute count",
          "type": "string",
          "readOnly": true
        },
        "due_date": {
          "title": "Due date",
          "description": "Bill due date",
          "type": "string",
          "format": "date-time"
        },
        "paid_amount": {
          "title": "Paid amount",
          "description": "Amount already paid",
          "type": "string",
          "format": "decimal",
          "readOnly": true
        },
        "paid_at": {
          "title": "Paid at",
          "description": "Date and time when bill was paid",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "remaining_amount": {
          "title": "Remaining amount",
          "type": "string",
          "format": "decimal",
          "readOnly": true
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "boolean",
          "readOnly": true
        },
        "is_cluster_wide": {
          "title": "Is cluster wide",
          "type": "boolean",
          "readOnly": true
        },
        "is_fully_paid": {
          "title": "Is fully paid",
          "type": "boolean",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MembersEmergencyContactSerializer": {
      "required": [
        "name",
        "phone_number",
        "contact_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Contact name",
          "description": "Name of the emergency contact",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "Contact phone number",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Contact email address (optional)",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "emergency_types": {
          "title": "Emergency types",
          "description": "List of emergency types this contact handles",
          "type": "object"
        },
        "contact_type": {
          "title": "Contact type",
          "type": "string",
          "enum": [
            "personal",
            "estate_wide",
            "official"
          ]
        },
        "is_primary": {
          "title": "Is primary",
          "description": "Whether this is a primary contact for the emergency types",
          "type": "boolean"
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about this contact",
          "type": "string"
        }
      }
    },
    "EntryExitLog": {
      "required": [
        "child",
        "log_type",
        "date",
        "reason"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "child": {
          "title": "Child",
          "description": "The child this log entry is for",
          "type": "string",
          "format": "uuid"
        },
        "child_name": {
          "title": "Child name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "exit_request": {
          "title": "Exit request",
          "description": "The exit request associated with this log",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "log_type": {
          "title": "Log type",
          "description": "Type of log entry",
          "type": "string",
          "enum": [
            "exit",
            "entry"
          ]
        },
        "date": {
          "title": "Date",
          "description": "Date of the entry/exit",
          "type": "string",
          "format": "date"
        },
        "exit_time": {
          "title": "Exit time",
          "description": "Time when the child exited",
          "type": "string",
          "x-nullable": true
        },
        "entry_time": {
          "title": "Entry time",
          "description": "Time when the child returned",
          "type": "string",
          "x-nullable": true
        },
        "expected_return_time": {
          "title": "Expected return time",
          "description": "Expected time for the child to return",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "actual_return_time": {
          "title": "Actual return time",
          "description": "Actual time when the child returned",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "reason": {
          "title": "Reason",
          "description": "Reason for the exit",
          "type": "string",
          "minLength": 1
        },
        "destination": {
          "title": "Destination",
          "description": "Where the child went",
          "type": "string",
          "maxLength": 200
        },
        "accompanying_adult": {
          "title": "Accompanying adult",
          "description": "Name of the adult accompanying the child",
          "type": "string",
          "maxLength": 100
        },
        "status": {
          "title": "Status",
          "description": "Current status of the entry/exit",
          "type": "string",
          "enum": [
            "scheduled",
            "in_progress",
            "completed",
            "overdue"
          ]
        },
        "verified_by": {
          "title": "Verified by",
          "description": "Security personnel who verified the exit/entry",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "verified_by_name": {
          "title": "Verified by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the entry/exit",
          "type": "string"
        },
        "is_overdue": {
          "title": "Is overdue",
          "type": "string",
          "readOnly": true
        },
        "duration_minutes": {
          "title": "Duration minutes",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ExitRequest": {
      "required": [
        "child",
        "requested_by",
        "reason",
        "expected_return_time",
        "expires_at"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "request_id": {
          "title": "Request ID",
          "description": "Unique identifier for the exit request",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "child": {
          "title": "Child",
          "description": "The child this exit request is for",
          "type": "string",
          "format": "uuid"
        },
        "child_name": {
          "title": "Child name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "requested_by": {
          "title": "Requested by",
          "description": "User who requested the exit",
          "type": "string",
          "format": "uuid"
        },
        "requested_by_name": {
          "title": "Requested by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "reason": {
          "title": "Reason for exit",
          "description": "Reason for the child's exit",
          "type": "string",
          "minLength": 1
        },
        "expected_return_time": {
          "title": "Expected return time",
          "description": "Expected time for the child to return",
          "type": "string",
          "format": "date-time"
        },
        "destination": {
          "title": "Destination",
          "description": "Where the child is going",
          "type": "string",
          "maxLength": 200
        },
        "accompanying_adult": {
          "title": "Accompanying adult",
          "description": "Name of the adult accompanying the child",
          "type": "string",
          "maxLength": 100
        },
        "accompanying_adult_phone": {
          "title": "Accompanying adult phone",
          "description": "Phone number of the accompanying adult",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20
        },
        "status": {
          "title": "Status",
          "description": "Current status of the exit request",
          "type": "string",
          "enum": [
            "pending",
            "approved",
            "denied",
            "expired"
          ]
        },
        "approved_by": {
          "title": "Approved by",
          "description": "User who approved the exit request",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "approved_by_name": {
          "title": "Approved by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "approved_at": {
          "title": "Approved at",
          "description": "When the exit request was approved",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "denied_by": {
          "title": "Denied by",
          "description": "User who denied the exit request",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "x-nullable": true
        },
        "denied_by_name": {
          "title": "Denied by name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "denied_at": {
          "title": "Denied at",
          "description": "When the exit request was denied",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "denial_reason": {
          "title": "Denial reason",
          "description": "Reason for denying the exit request",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "expires_at": {
          "title": "Expires at",
          "description": "When the exit request expires",
          "type": "string",
          "format": "date-time"
        },
        "is_expired": {
          "title": "Is expired",
          "type": "string",
          "readOnly": true
        },
        "is_pending": {
          "title": "Is pending",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ExitRequestCreate": {
      "required": [
        "child",
        "reason",
        "expected_return_time",
        "expires_at"
      ],
      "type": "object",
      "properties": {
        "child": {
          "title": "Child",
          "description": "The child this exit request is for",
          "type": "string",
          "format": "uuid"
        },
        "reason": {
          "title": "Reason for exit",
          "description": "Reason for the child's exit",
          "type": "string",
          "minLength": 1
        },
        "expected_return_time": {
          "title": "Expected return time",
          "description": "Expected time for the child to return",
          "type": "string",
          "format": "date-time"
        },
        "destination": {
          "title": "Destination",
          "description": "Where the child is going",
          "type": "string",
          "maxLength": 200
        },
        "accompanying_adult": {
          "title": "Accompanying adult",
          "description": "Name of the adult accompanying the child",
          "type": "string",
          "maxLength": 100
        },
        "accompanying_adult_phone": {
          "title": "Accompanying adult phone",
          "description": "Phone number of the accompanying adult",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20
        },
        "expires_at": {
          "title": "Expires at",
          "description": "When the exit request expires",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ExitRequestUpdate": {
      "required": [
        "reason",
        "expected_return_time",
        "expires_at"
      ],
      "type": "object",
      "properties": {
        "reason": {
          "title": "Reason for exit",
          "description": "Reason for the child's exit",
          "type": "string",
          "minLength": 1
        },
        "expected_return_time": {
          "title": "Expected return time",
          "description": "Expected time for the child to return",
          "type": "string",
          "format": "date-time"
        },
        "destination": {
          "title": "Destination",
          "description": "Where the child is going",
          "type": "string",
          "maxLength": 200
        },
        "accompanying_adult": {
          "title": "Accompanying adult",
          "description": "Name of the adult accompanying the child",
          "type": "string",
          "maxLength": 100
        },
        "accompanying_adult_phone": {
          "title": "Accompanying adult phone",
          "description": "Phone number of the accompanying adult",
          "type": "string",
          "pattern": "^\\+?1?\\d{9,15}$",
          "maxLength": 20
        },
        "expires_at": {
          "title": "Expires at",
          "description": "When the exit request expires",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "IssueTicketCreate": {
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "Brief title describing the issue",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of the issue",
          "type": "string",
          "minLength": 1
        },
        "issue_type": {
          "title": "Issue type",
          "description": "Type of issue being reported",
          "type": "string",
          "enum": [
            "CARPENTRY",
            "PLUMBING",
            "ELECTRICAL",
            "CLEANING",
            "SECURITY",
            "OTHER"
          ]
        },
        "priority": {
          "title": "Priority",
          "description": "Priority level of the issue",
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "URGENT"
          ]
        }
      }
    },
    "MemberProfile": {
      "required": [
        "name",
        "phone_number"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "readOnly": true,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "maxLength": 16,
          "minLength": 4
        },
        "unit_address": {
          "title": "Unit address",
          "description": "This is the address of the resident in the cluster",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "profile_image_url": {
          "title": "Profile image url",
          "description": "Profile image of the user.",
          "type": "string",
          "format": "uri",
          "maxLength": 200
        },
        "property_owner": {
          "title": "Property owner",
          "type": "boolean"
        },
        "is_verified": {
          "title": "Is verified?",
          "description": "Has this user completed email verification flow?",
          "type": "boolean",
          "readOnly": true
        },
        "is_phone_verified": {
          "title": "Is phone verified?",
          "description": "Has this user completed phone verification flow?",
          "type": "boolean",
          "readOnly": true
        },
        "emergency_contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MembersEmergencyContactSerializer"
          }
        }
      }
    },
    "MemberRegistration": {
      "required": [
        "email_address",
        "name",
        "phone_number",
        "unit_address",
        "password",
        "confirm_password",
        "cluster_id"
      ],
      "type": "object",
      "properties": {
        "email_address": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 100,
          "minLength": 1
        },
        "name": {
          "title": "Name of user",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "phone_number": {
          "title": "Phone number",
          "description": "The phone number for this subscription in E.164 format. See details: https://www.twilio.com/docs/glossary/what-e164",
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "maxLength": 16,
          "minLength": 4
        },
        "unit_address": {
          "title": "Unit address",
          "description": "This is the address of the resident in the cluster",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 1
        },
        "confirm_password": {
          "title": "Confirm password",
          "type": "string",
          "minLength": 1
        },
        "property_owner": {
          "title": "Property owner",
          "type": "boolean",
          "default": false
        },
        "cluster_id": {
          "title": "Cluster id",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VisitorLog": {
      "required": [
        "visitor"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "description": "UUID primary key",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "visitor": {
          "title": "Visitor",
          "description": "The visitor this log entry is for",
          "type": "string",
          "format": "uuid"
        },
        "visitor_name": {
          "title": "Visitor name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "date": {
          "title": "Date",
          "description": "Date of the log entry",
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "arrival_time": {
          "title": "Arrival time",
          "description": "Time when the visitor arrived",
          "type": "string",
          "x-nullable": true
        },
        "departure_time": {
          "title": "Departure time",
          "description": "Time when the visitor departed",
          "type": "string",
          "x-nullable": true
        },
        "log_type": {
          "title": "Log type",
          "description": "Type of log entry",
          "type": "string",
          "enum": [
            "SCHEDULED",
            "CHECKED_IN",
            "CHECKED_OUT",
            "CANCELLED"
          ]
        },
        "checked_in_by": {
          "title": "Checked in by",
          "description": "ID of the user who checked in the visitor",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "checked_out_by": {
          "title": "Checked out by",
          "description": "ID of the user who checked out the visitor",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the visit",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_modified_at": {
          "title": "Last modified date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "VisitorCreate": {
      "required": [
        "name",
        "phone",
        "estimated_arrival",
        "valid_date"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Visitor name",
          "description": "Full name of the visitor",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Email address of the visitor",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "phone": {
          "title": "Phone number",
          "description": "Phone number of the visitor",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "estimated_arrival": {
          "title": "Estimated arrival",
          "description": "Expected date and time of arrival",
          "type": "string",
          "format": "date-time"
        },
        "visit_type": {
          "title": "Visit type",
          "description": "Type of visit",
          "type": "string",
          "enum": [
            "ONE_TIME",
            "SHORT_STAY",
            "EXTENDED_STAY"
          ]
        },
        "valid_for": {
          "title": "Valid for",
          "description": "Validity type of the access code",
          "type": "string",
          "enum": [
            "ONE_TIME",
            "MULTIPLE"
          ]
        },
        "valid_date": {
          "title": "Valid date",
          "description": "Date until which the access code is valid",
          "type": "string",
          "format": "date"
        },
        "purpose": {
          "title": "Purpose of visit",
          "description": "Purpose or reason for the visit",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the visitor",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "VisitorUpdate": {
      "required": [
        "name",
        "phone",
        "estimated_arrival",
        "valid_date"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Visitor name",
          "description": "Full name of the visitor",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "email": {
          "title": "Email address",
          "description": "Email address of the visitor",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "x-nullable": true
        },
        "phone": {
          "title": "Phone number",
          "description": "Phone number of the visitor",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "estimated_arrival": {
          "title": "Estimated arrival",
          "description": "Expected date and time of arrival",
          "type": "string",
          "format": "date-time"
        },
        "visit_type": {
          "title": "Visit type",
          "description": "Type of visit",
          "type": "string",
          "enum": [
            "ONE_TIME",
            "SHORT_STAY",
            "EXTENDED_STAY"
          ]
        },
        "status": {
          "title": "Status",
          "description": "Current status of the visitor",
          "type": "string",
          "enum": [
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CHECKED_IN",
            "CHECKED_OUT",
            "EXPIRED"
          ]
        },
        "valid_for": {
          "title": "Valid for",
          "description": "Validity type of the access code",
          "type": "string",
          "enum": [
            "ONE_TIME",
            "MULTIPLE"
          ]
        },
        "valid_date": {
          "title": "Valid date",
          "description": "Date until which the access code is valid",
          "type": "string",
          "format": "date"
        },
        "purpose": {
          "title": "Purpose of visit",
          "description": "Purpose or reason for the visit",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "title": "Notes",
          "description": "Additional notes about the visitor",
          "type": "string",
          "x-nullable": true
        }
      }
    }
  }
}